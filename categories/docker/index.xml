<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on wolanx</title><link>https://wolanx.com/categories/docker/</link><description>Recent content in docker on wolanx</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 11 Feb 2022 22:17:51 +0800</lastBuildDate><atom:link href="https://wolanx.com/categories/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>python Dockerfile</title><link>https://wolanx.com/posts/docker/python.dockerfile/</link><pubDate>Fri, 11 Feb 2022 22:17:51 +0800</pubDate><guid>https://wolanx.com/posts/docker/python.dockerfile/</guid><description>FROMpython:3.10.0-slimRUN sed -i &amp;#39;s/deb.debian.org/mirrors.aliyun.com/g&amp;#39; /etc/apt/sources.list \ &amp;amp;&amp;amp; sed -i &amp;#39;s/security.debian.org/mirrors.aliyun.com/g&amp;#39; /etc/apt/sources.listRUN mkdir ~/.pip \ &amp;amp;&amp;amp; echo &amp;#39;[global]\n \ trusted-host=mirrors.aliyun.com\n \ index-url=https://mirrors.aliyun.com/pypi/simple\n \ &amp;#39; &amp;gt; ~/.pip/pip.confRUN apt-get update -y \ &amp;amp;&amp;amp; apt-get install -y gcc curl \ &amp;amp;&amp;amp; apt-get install -y --no-install-recommends vim tree \ &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*RUN curl -s -L -o ~/rocketmq-client-cpp-2.0.0.amd64.deb \ &amp;#39;https://github.com.cnpmjs.org/apache/rocketmq-client-cpp/releases/download/2.0.0/rocketmq-client-cpp-2.0.0.amd64.deb&amp;#39; \ &amp;amp;&amp;amp; dpkg -i ~/rocketmq-client-cpp-2.0.0.amd64.deb \ &amp;amp;&amp;amp; rm -f ~/rocketmq-client-cpp-2.</description></item><item><title>k3s</title><link>https://wolanx.com/posts/docker/k3s/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/docker/k3s/</guid><description>k3s # Lightweight Kubernetes
# start k3s server --docker --no-deploy=traefik # systemd /etc/systemd/system/k3s.service journalctl -u k3s -f # 日志 config # cd /var/lib/rancher/k3s/server/manifests /etc/rancher/k3s/k3s.yaml install # curl -sfL https://get.k3s.io | sh - # images wget https://github.com/rancher/k3s/releases/download/v1.0.0/k3s-airgap-images-amd64.tar docker load --input k3s-airgap-images-amd64.tar # download k3s bin wget https://github.com/rancher/k3s/releases/download/v1.17.4%2Bk3s1/k3s cp k3s /usr/local/bin/ chmod 777 /usr/local/bin/k3s curl -sfL https://get.k3s.io &amp;gt; ~/a.sh # reinstall cp /usr/local/bin/k3s ~/k3s cp ~/k3s /usr/local/bin/k3s INSTALL_K3S_SKIP_DOWNLOAD=true sh a.</description></item><item><title>k8s</title><link>https://wolanx.com/posts/docker/k8s/</link><pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/docker/k8s/</guid><description>auth api # # cd /var/run/secrets/kubernetes.io/serviceaccount 默认token目录 CA_CERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace) curl --cacert $CA_CERT -H &amp;#34;Authorization: Bearer $TOKEN&amp;#34; &amp;#34;https://10.10.18.158:6443/api/v1/namespaces/$NAMESPACE/services/&amp;#34; # 失败 需要 bind role k get clusterroles k -nccm-perf create rolebinding my-view --serviceaccount=ccm-perf:default --clusterrole=view k -nccm-perf create rolebinding my-view --serviceaccount=ccm-perf:default --clusterrole=admin k get rolebinding log app # 基于 Golang 的云原生日志采集服务设计与实践 https://mp.weixin.qq.com/s/3sCyWg-HwfZ4ymm8T9s4zg /var/lib/docker/containers/{}/{}-json.log /var/lib/kubelet/pods/{}/volumes/kubernetes.io~empty-dir/log pvc # volumes: - name: mypd persistentVolumeClaim: claimName: pvc-oss-test volumeMounts: - name: mypd mountPath: &amp;#34;/pvvv-test&amp;#34; helm # ## install wget https://get.</description></item><item><title>kubectl</title><link>https://wolanx.com/posts/docker/kubectl/</link><pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/docker/kubectl/</guid><description>kubectl # 备忘录 https://kubernetes.io/docs/reference/kubectl/cheatsheet/ export KUBECONFIG=~/Desktop/www/work-book/env/sandbox/1_kubernetes/kubeconfig kubectl get pod -A kubectl run hello-minikube --image=zx5435/go-fs:v1 --port=8080 kubectl delete -n default deployment hello-minikube kubectl logs -f pod-gim-uat-app-2 kubectl logs --tail=50 -f pod-gim-uat-app-2 install # curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.16.0/bin/windows/amd64/kubectl.exe config # namespace # kubectl config set-context --current --namespace=$(basename $PWD) kubectl config set-context --current --namespace=ccm-perf kubectl config set-context $(kubectl config current-context) --namespace=ccm-perf run # kubectl run hello-minikube --image=zx5435/go-fs:v1 --port=8080 delete 批量 # kubectl -nccm-uat get pod --field-selector=status.</description></item><item><title>docker app</title><link>https://wolanx.com/posts/docker/app/</link><pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/docker/app/</guid><description>infrastructure # portainer 管理 # docker run -d --restart=unless-stopped --name portainer -p 1234:9000 -v &amp;#34;/var/run/docker.sock:/var/run/docker.sock&amp;#34; portainer/portainer-ce:2.6.0 docker run -d --restart=unless-stopped --name portainer -p 1234:9000 -v &amp;#34;/var/run/docker.sock:/var/run/docker.sock&amp;#34; portainer/portainer:1.23.2 # //./pipe/docker_engine # &amp;#34;hosts&amp;#34;: [&amp;#34;tcp://0.0.0.0:2375&amp;#34;] server { listen 80; charset utf-8; server_name uat.docker.manager; location / { proxy_pass http://127.0.0.1:1234; proxy_http_version 1.1; proxy_set_header Connection &amp;#34;&amp;#34;; proxy_set_header Host $host; proxy_set_header Scheme $scheme; } } registry # DOCKER_OPTS=&amp;#34;--insecure-registry 192.168.1.19:5000&amp;#34; docker run -d -p 5000:5000 --restart=always --name registry registry:2.</description></item><item><title>docker 基础</title><link>https://wolanx.com/posts/docker/docker/</link><pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/docker/docker/</guid><description>doc # Docker学习笔记 https://segmentfault.com/a/1190000005930858 Docker 核心技术与实现原理 https://draveness.me/docker Docker 问答录（100 问） https://blog.lab99.org/post/docker-2016-07-14-faq.html Docker 实践系列文章 https://segmentfault.com/a/1190000006449675 install # # centos sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo yum list docker-ce --showduplicates | sort -r sudo yum install -y docker-ce # debian https://docs.docker.com/engine/install/debian/ # 开机启动 systemctl status docker systemctl enable docker service docker restart kill -SIGHUP $(pidof dockerd) config # cat &amp;gt; /etc/docker/daemon.json &amp;lt;&amp;lt; EOF { &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://registry.</description></item><item><title>docker-compose</title><link>https://wolanx.com/posts/docker/docker-compose/</link><pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/docker/docker-compose/</guid><description>docker-compose # docker-compose ps docker-compose logs --tail=100 -f docker-compose logs --tail=100 -f svc-web docker-compose restart svc-web install # # https://docs.docker.com/compose/install/#install-compose yum install -y docker-compose sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose docker-compose --version tpl # java + redis + influxdb # version: &amp;#34;3&amp;#34; services: svc-web: image: ghcr.io/wolanx/iothub-echo ports: - 1883:1883 - 18830:8080 entrypoint: java -cp /app/resources:/app/classes:/app/libs/* com.wolanx.echo.iothub.IotHubApplication volumes: - .:/root environment: - TZ=utc-8 - JVM=-XX:+UseContainerSupport - REDIS_HOST=svc-redis - INFLUXDB_HOST=svc-influxdb networks: - mynet svc-redis: image: redis:6.</description></item><item><title>php Dockerfile</title><link>https://wolanx.com/posts/docker/php.dockerfile/</link><pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/docker/php.dockerfile/</guid><description>2019-04-04 zst php:7.1.11 # docker pull zx5435/php:7.1.10
All version is small about 100mb, quick to download and running fast. They are cover my work in everywhere, you can try it. include:
mysql postgres redis mongo apcu gd xdebug bcmath zip FROM php:7.1.11-fpm-alpine RUN apk add --no-cache freetype libpng libjpeg-turbo freetype-dev libpng-dev libjpeg-turbo-dev \ &amp;amp;&amp;amp; apk add --no-cache --virtual .build-deps autoconf g++ libssh2 openssl openssl-dev make pcre-dev tree curl \ &amp;amp;&amp;amp; apk add --no-cache postgresql-dev \ &amp;amp;&amp;amp; docker-php-ext-configure gd \ --with-gd \ --with-freetype-dir=/usr/include/ \ --with-png-dir=/usr/include/ \ --with-jpeg-dir=/usr/include/ \ &amp;amp;&amp;amp; pecl install mongodb-1.</description></item></channel></rss>