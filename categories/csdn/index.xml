<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>csdn on wolanx</title><link>https://wolanx.com/categories/csdn/</link><description>Recent content in csdn on wolanx</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 06 May 2022 20:01:16 +0800</lastBuildDate><atom:link href="https://wolanx.com/categories/csdn/index.xml" rel="self" type="application/rss+xml"/><item><title>pytorch mnist vgg16 错误记录</title><link>https://wolanx.com/posts/article/pytorch-mnist-vgg16-%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</link><pubDate>Fri, 06 May 2022 20:01:16 +0800</pubDate><guid>https://wolanx.com/posts/article/pytorch-mnist-vgg16-%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</guid><description>https://blog.csdn.net/wolanx/article/details/124599294 Intro # 在尝试了FC，CNN等模型在 mnist 的练习后，使用 torchvision.models 的官方定义尝试运行 vgg16，resnet。 常见会出现以下错误：
RuntimeError: Given groups=1, weight of size [64, 3, 3, 3], expected input[64, 1, 28, 28] to have 3 channels, but got 1 channels instead RuntimeError: Given input size: (512x1x1). Calculated output size: (512x0x0). Output size is too small 模型定义如下 # # mnist cnn 不知道怎么写的，可以参考 https://github.com/wolanx/pii/blob/main/x10_ml/demo2-6_mnist/demo2-6.ipynb dataset1 = torchvision.datasets.MNIST(root=&amp;#34;./data&amp;#34;, train=True, download=True, transform=transform) model = torchvision.models.vgg16(pretrained=False, num_classes=10) model = model.</description></item><item><title>threejs react fiber 最佳实践</title><link>https://wolanx.com/posts/article/threejs-react-fiber-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Wed, 16 Mar 2022 17:50:27 +0000</pubDate><guid>https://wolanx.com/posts/article/threejs-react-fiber-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>https://blog.csdn.net/wolanx/article/details/123526472 Intro # 在使用的相当一段时间的 threejs 和 react-three-fiber 后，在中文资料环境极其匮乏的情况下，做个极简·笔记式的分享。目标是能让大家在 最快 的速度上手，且 半·精通
Install # npm install three @react-three/fiber 官方文档 Demo1 - 全局概览 # ![](https://img-blog.csdnimg.cn/1845e0529fbf434388ba99b656eaf466.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeXVqaWUuemhhbw==,size_13,color_FFFFFF,t_70,g_se,x_16 =250x)
这是一个短小精悍的 demo1，对着下面代码看解析
物体 盒子：new BoxGeometry() 球：new SphereGeometry(.5, 32, 16) 物体上色 &amp;lt;mesh geometry={ball} material={mtl1} /&amp;gt; 使用 mesh 将 物体和材料 捆绑 光1 &amp;lt;ambientLight intensity={0.1} /&amp;gt; 环境光，四面八方的光，intensity 光的强度 光2 &amp;lt;directionalLight /&amp;gt; 一束光 需要 color position：照射方向 控制 OrbitControls 交互操作，鼠标 旋转：左键拖拽 平移：右键拖拽 放大：滚轮 阴影 &amp;lt;ContactShadows /&amp;gt; 参数字面意思 背景 &amp;lt;color attach='background' args={['#aaa']} /&amp;gt; 也可以用 css 解决 import React, { Suspense } from &amp;#39;react&amp;#39; import { BoxGeometry, MeshStandardMaterial } from &amp;#39;three&amp;#39; import { Canvas } from &amp;#39;@react-three/fiber&amp;#39; import { ContactShadows, OrbitControls } from &amp;#39;@react-three/drei&amp;#39; const ball = new BoxGeometry() const mtl1 = new MeshStandardMaterial({ color: &amp;#39;#f00&amp;#39; }) export default function Demo () { return ( &amp;lt;Canvas style={{ height: 800 }} camera={{ fov: 75, near: 0.</description></item><item><title>hugo + github action 免费个人博客【2022版】</title><link>https://wolanx.com/posts/article/hugo-+-github-action-%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22022%E7%89%88/</link><pubDate>Fri, 11 Feb 2022 17:44:26 +0800</pubDate><guid>https://wolanx.com/posts/article/hugo-+-github-action-%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22022%E7%89%88/</guid><description>https://blog.csdn.net/wolanx/article/details/122857729 Intro # 免费个人博客 的教程非常的 多，但大多面向 纯小白，反而对有一定基础的同学显得 落后 + 啰嗦，本文整合目前已知最好的方式，最快捷优雅的搞定一个博客，并给出 常见错误。
知识点 # hugo 的安装及使用不是本文重点，其实同理 hexo git github 默认已掌握 github page 生成可访问的页面的 灵魂 所在 github action 自动生成上一步 完整链路解析 # git commit 提交 触发 github action .github/workflows/my-pipeline.yml 并满足设置中的 on 条件 触发 pipeline 中的 steps checkout：相当与 git clone，并且后续操作具有 github 完整权限，可以通过 permissions 设置 setup hugo：准备构建要求，安装对应版本，注意是否需要 extended build：构建出静态文件，并输出到 public 文件夹 deploy：该插件来自 插件市场 自动创建分支 gh-pages 自动 copy public 到新分支 自动提交 自动生成 CNAME 文件，根据 cname 设置，想要 自定义域名 的注意这里了 打开 https://github.</description></item><item><title>logfmt python 实现</title><link>https://wolanx.com/posts/article/logfmt-python-%E5%AE%9E%E7%8E%B0/</link><pubDate>Fri, 11 Feb 2022 15:45:10 +0800</pubDate><guid>https://wolanx.com/posts/article/logfmt-python-%E5%AE%9E%E7%8E%B0/</guid><description>https://blog.csdn.net/wolanx/article/details/122733747 Intro # 现在很多主流日志系统推崇 logfmt 格式，但是 python 中配套的不多，这边给个参考
日志大概长这样
# log.info(&amp;#34;haha&amp;#34;) time=&amp;#34;2022-01-28T17:00:52+0800&amp;#34; type=default level=info method=&amp;#34;a.py:82&amp;#34; msg=&amp;#34;haha&amp;#34; # log.warning(&amp;#34;no access&amp;#34;) time=&amp;#34;2022-01-28T17:00:52+0800&amp;#34; type=default level=warning method=&amp;#34;a.py:83&amp;#34; msg=&amp;#34;no access&amp;#34; 实现过程 # PiiLogger 继承 logging.Logger 绑定自定义的 formatter 清空原有 handler 否则会重复输出 把 formatter 注册给 handler hook 外层 变量 （如：每条log带上web请求的uuid） PiiLoggerFormatter 继承 logging.Formatter 实现 format 的 自定义，内嵌变量请参考 官方 LogRecord 属性 hook 外层 变量 外层变量的使用 # def getUUid(): v = None if has_request_context(): # 判断 flask web 的生命周期下 v = Pii.</description></item><item><title>python 使用 reportlab 生成 pdf</title><link>https://wolanx.com/posts/article/python-%E4%BD%BF%E7%94%A8-reportlab-%E7%94%9F%E6%88%90-pdf/</link><pubDate>Wed, 09 Feb 2022 15:30:51 +0800</pubDate><guid>https://wolanx.com/posts/article/python-%E4%BD%BF%E7%94%A8-reportlab-%E7%94%9F%E6%88%90-pdf/</guid><description>https://blog.csdn.net/wolanx/article/details/122828185 Intro # 项目中遇到需要 导出统计报表 等业务时，通常需要 pdf 格式。python 中比较有名的就是 reportlab 。 这边通过几个小 demo 快速演示常用 api。所有功能点 源码 都在 使用场景。
一句话了解：跟 css 差不多，就是不断地对每样东西设置 style，然后把 style 和内容绑定。
功能点 # 生成 文件： 先 SimpleDocTemplate(&amp;lsquo;xxx.pdf&amp;rsquo;)，然后 build 流文件：先 io.BytesIO() 生成句柄，然后同理 曲线图 LinePlot 饼图 Pie 文字 Paragraph fontSize 字体大小 推荐 14 加粗 &amp;lt;b&amp;gt;xxx&amp;lt;/b&amp;gt; 使用的是 html 的方式，字体自动实现 firstLineIndent 首行缩进 推荐 2 * fontSize leading 行间距 推荐 1.5 * fontSize fontName 默认中文会变成 ■ 下载 .</description></item><item><title>Markdown</title><link>https://wolanx.com/posts/article/markdown/</link><pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/article/markdown/</guid><description>From csdn
欢迎使用Markdown编辑器 # 你好！ 这是你第一次使用 Markdown编辑器 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。
新的改变 # 我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：
全新的界面设计 ，将会带来全新的写作体验； 在创作中心设置你喜爱的代码高亮样式，Markdown 将代码片显示选择的高亮样式 进行展示； 增加了 图片拖拽 功能，你可以将本地的图片直接拖拽到编辑区域直接展示； 全新的 KaTeX数学公式 语法； 增加了支持甘特图的mermaid语法1 功能； 增加了 多屏幕编辑 Markdown文章功能； 增加了 焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置 等功能，功能按钮位于编辑区域与预览区域中间； 增加了 检查列表 功能。 功能快捷键 # 撤销：Ctrl/Command+ Z重做：Ctrl/Command+ Y加粗：Ctrl/Command+ B斜体：Ctrl/Command+ I标题：Ctrl/Command+ Shift+ H无序列表：Ctrl/Command+ Shift+ U有序列表：Ctrl/Command+ Shift+ O检查列表：Ctrl/Command+ Shift+ C插入代码：Ctrl/Command+ Shift+ K插入链接：Ctrl/Command+ Shift+ L插入图片：Ctrl/Command+ Shift+ G查找：Ctrl/Command+ F替换：Ctrl/Command+ G合理的创建标题，有助于目录的生成 # 直接输入1次#，并按下space后，将生成1级标题。 输入2次#，并按下space后，将生成2级标题。 以此类推，我们支持6级标题。有助于使用TOC语法后生成一个完美的目录。
如何改变文本的样式 # 强调文本 强调文本</description></item></channel></rss>