<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>csdn on wolanx</title><link>https://wolanx.com/categories/csdn/</link><description>Recent content in csdn on wolanx</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 11 Feb 2022 17:44:26 +0800</lastBuildDate><atom:link href="https://wolanx.com/categories/csdn/index.xml" rel="self" type="application/rss+xml"/><item><title>hugo + github action 免费个人博客【2022版】</title><link>https://wolanx.com/posts/article/hugo-+-github-action-%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22022%E7%89%88/</link><pubDate>Fri, 11 Feb 2022 17:44:26 +0800</pubDate><guid>https://wolanx.com/posts/article/hugo-+-github-action-%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22022%E7%89%88/</guid><description>https://blog.csdn.net/wolanx/article/details/122857729 Intro # 免费个人博客 的教程非常的 多，但大多面向 纯小白，反而对有一定基础的同学显得 落后 + 啰嗦，本文整合目前已知最好的方式，最快捷优雅的搞定一个博客，并给出 常见错误。
知识点 # hugo 的安装及使用不是本文重点，其实同理 hexo git github 默认已掌握 github page 生成可访问的页面的 灵魂 所在 github action 自动生成上一步 完整链路解析 # git commit 提交 触发 github action .github/workflows/my-pipeline.yml 并满足设置中的 on 条件 触发 pipeline 中的 steps checkout：相当与 git clone，并且后续操作具有 github 完整权限，可以通过 permissions 设置 setup hugo：准备构建要求，安装对应版本，注意是否需要 extended build：构建出静态文件，并输出到 public 文件夹 deploy：该插件来自 插件市场 自动创建分支 gh-pages 自动 copy public 到新分支 自动提交 自动生成 CNAME 文件，根据 cname 设置，想要 自定义域名 的注意这里了 打开 https://github.</description></item><item><title>logfmt python 实现</title><link>https://wolanx.com/posts/article/logfmt-python-%E5%AE%9E%E7%8E%B0/</link><pubDate>Fri, 11 Feb 2022 15:45:10 +0800</pubDate><guid>https://wolanx.com/posts/article/logfmt-python-%E5%AE%9E%E7%8E%B0/</guid><description>https://blog.csdn.net/wolanx/article/details/122733747 Intro # 现在很多主流日志系统推崇 logfmt 格式，但是 python 中配套的不多，这边给个参考
日志大概长这样
# log.info(&amp;#34;haha&amp;#34;) time=&amp;#34;2022-01-28T17:00:52+0800&amp;#34; type=default level=info method=&amp;#34;a.py:82&amp;#34; msg=&amp;#34;haha&amp;#34; # log.warning(&amp;#34;no access&amp;#34;) time=&amp;#34;2022-01-28T17:00:52+0800&amp;#34; type=default level=warning method=&amp;#34;a.py:83&amp;#34; msg=&amp;#34;no access&amp;#34; 实现过程 # PiiLogger 继承 logging.Logger 绑定自定义的 formatter 清空原有 handler 否则会重复输出 把 formatter 注册给 handler hook 外层 变量 （如：每条log带上web请求的uuid） PiiLoggerFormatter 继承 logging.Formatter 实现 format 的 自定义，内嵌变量请参考 官方 LogRecord 属性 hook 外层 变量 外层变量的使用 # def getUUid(): v = None if has_request_context(): # 判断 flask web 的生命周期下 v = Pii.</description></item><item><title>python 使用 reportlab 生成 pdf</title><link>https://wolanx.com/posts/article/python-%E4%BD%BF%E7%94%A8-reportlab-%E7%94%9F%E6%88%90-pdf/</link><pubDate>Wed, 09 Feb 2022 15:30:51 +0800</pubDate><guid>https://wolanx.com/posts/article/python-%E4%BD%BF%E7%94%A8-reportlab-%E7%94%9F%E6%88%90-pdf/</guid><description>https://blog.csdn.net/wolanx/article/details/122828185 Intro # 项目中遇到需要 导出统计报表 等业务时，通常需要 pdf 格式。python 中比较有名的就是 reportlab 。 这边通过几个小 demo 快速演示常用 api。所有功能点 源码 都在 使用场景。
一句话了解：跟 css 差不多，就是不断地对每样东西设置 style，然后把 style 和内容绑定。
功能点 # 生成 文件： 先 SimpleDocTemplate(&amp;lsquo;xxx.pdf&amp;rsquo;)，然后 build 流文件：先 io.BytesIO() 生成句柄，然后同理 曲线图 LinePlot 饼图 Pie 文字 Paragraph fontSize 字体大小 推荐 14 加粗 &amp;lt;b&amp;gt;xxx&amp;lt;/b&amp;gt; 使用的是 html 的方式，字体自动实现 firstLineIndent 首行缩进 推荐 2 * fontSize leading 行间距 推荐 1.5 * fontSize fontName 默认中文会变成 ■ 下载 .</description></item></channel></rss>