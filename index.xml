<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on wolanx</title><link>https://wolanx.com/</link><description>Recent content in Introduction on wolanx</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 23 May 2022 12:00:00 +0800</lastBuildDate><atom:link href="https://wolanx.com/index.xml" rel="self" type="application/rss+xml"/><item><title>塞班手机模拟器 KEmulator</title><link>https://wolanx.com/posts/tool/kemulator/</link><pubDate>Mon, 23 May 2022 12:00:00 +0800</pubDate><guid>https://wolanx.com/posts/tool/kemulator/</guid><description>安装 # java 环境准备 https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html#license-lightbox 登陆下 oracle 下载 32位 jre-8u202-windows-i586.tar.gz 模拟器准备 https://pan.baidu.com/s/1zSVZGO4Pn7W7UNisPnOOVw 提取码: 8zn4 下载 KEmulator-0.9.6 稳定可靠 运行 ~/.jdks/jre8_32/bin/java -jar KEmulator.jar 修改分辨率：视图-选项-定制-屏幕宽-800-高750 load jar包</description></item><item><title>pytorch mnist vgg16 错误记录</title><link>https://wolanx.com/posts/article/pytorch-mnist-vgg16-%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</link><pubDate>Fri, 06 May 2022 20:01:16 +0800</pubDate><guid>https://wolanx.com/posts/article/pytorch-mnist-vgg16-%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</guid><description>https://blog.csdn.net/wolanx/article/details/124599294 Intro # 在尝试了FC，CNN等模型在 mnist 的练习后，使用 torchvision.models 的官方定义尝试运行 vgg16，resnet。 常见会出现以下错误：
RuntimeError: Given groups=1, weight of size [64, 3, 3, 3], expected input[64, 1, 28, 28] to have 3 channels, but got 1 channels instead RuntimeError: Given input size: (512x1x1). Calculated output size: (512x0x0). Output size is too small 模型定义如下 # # mnist cnn 不知道怎么写的，可以参考 https://github.com/wolanx/pii/blob/main/x10_ml/demo2-6_mnist/demo2-6.ipynb dataset1 = torchvision.datasets.MNIST(root=&amp;#34;./data&amp;#34;, train=True, download=True, transform=transform) model = torchvision.models.vgg16(pretrained=False, num_classes=10) model = model.</description></item><item><title>threejs react fiber 最佳实践</title><link>https://wolanx.com/posts/article/threejs-react-fiber-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Wed, 16 Mar 2022 17:50:27 +0000</pubDate><guid>https://wolanx.com/posts/article/threejs-react-fiber-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>https://blog.csdn.net/wolanx/article/details/123526472 Intro # 在使用的相当一段时间的 threejs 和 react-three-fiber 后，在中文资料环境极其匮乏的情况下，做个极简·笔记式的分享。目标是能让大家在 最快 的速度上手，且 半·精通
Install # npm install three @react-three/fiber 官方文档 Demo1 - 全局概览 # ![](https://img-blog.csdnimg.cn/1845e0529fbf434388ba99b656eaf466.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeXVqaWUuemhhbw==,size_13,color_FFFFFF,t_70,g_se,x_16 =250x)
这是一个短小精悍的 demo1，对着下面代码看解析
物体 盒子：new BoxGeometry() 球：new SphereGeometry(.5, 32, 16) 物体上色 &amp;lt;mesh geometry={ball} material={mtl1} /&amp;gt; 使用 mesh 将 物体和材料 捆绑 光1 &amp;lt;ambientLight intensity={0.1} /&amp;gt; 环境光，四面八方的光，intensity 光的强度 光2 &amp;lt;directionalLight /&amp;gt; 一束光 需要 color position：照射方向 控制 OrbitControls 交互操作，鼠标 旋转：左键拖拽 平移：右键拖拽 放大：滚轮 阴影 &amp;lt;ContactShadows /&amp;gt; 参数字面意思 背景 &amp;lt;color attach='background' args={['#aaa']} /&amp;gt; 也可以用 css 解决 import React, { Suspense } from &amp;#39;react&amp;#39; import { BoxGeometry, MeshStandardMaterial } from &amp;#39;three&amp;#39; import { Canvas } from &amp;#39;@react-three/fiber&amp;#39; import { ContactShadows, OrbitControls } from &amp;#39;@react-three/drei&amp;#39; const ball = new BoxGeometry() const mtl1 = new MeshStandardMaterial({ color: &amp;#39;#f00&amp;#39; }) export default function Demo () { return ( &amp;lt;Canvas style={{ height: 800 }} camera={{ fov: 75, near: 0.</description></item><item><title>python Dockerfile</title><link>https://wolanx.com/posts/docker/python.dockerfile/</link><pubDate>Fri, 11 Feb 2022 22:17:51 +0800</pubDate><guid>https://wolanx.com/posts/docker/python.dockerfile/</guid><description>FROMpython:3.10.0-slimRUN sed -i &amp;#39;s/deb.debian.org/mirrors.aliyun.com/g&amp;#39; /etc/apt/sources.list \ &amp;amp;&amp;amp; sed -i &amp;#39;s/security.debian.org/mirrors.aliyun.com/g&amp;#39; /etc/apt/sources.listRUN mkdir ~/.pip \ &amp;amp;&amp;amp; echo &amp;#39;[global]\n \ trusted-host=mirrors.aliyun.com\n \ index-url=https://mirrors.aliyun.com/pypi/simple\n \ &amp;#39; &amp;gt; ~/.pip/pip.confRUN apt-get update -y \ &amp;amp;&amp;amp; apt-get install -y gcc curl \ &amp;amp;&amp;amp; apt-get install -y --no-install-recommends vim tree \ &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*RUN curl -s -L -o ~/rocketmq-client-cpp-2.0.0.amd64.deb \ &amp;#39;https://github.com.cnpmjs.org/apache/rocketmq-client-cpp/releases/download/2.0.0/rocketmq-client-cpp-2.0.0.amd64.deb&amp;#39; \ &amp;amp;&amp;amp; dpkg -i ~/rocketmq-client-cpp-2.0.0.amd64.deb \ &amp;amp;&amp;amp; rm -f ~/rocketmq-client-cpp-2.</description></item><item><title>hugo + github action 免费个人博客【2022版】</title><link>https://wolanx.com/posts/article/hugo-+-github-action-%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22022%E7%89%88/</link><pubDate>Fri, 11 Feb 2022 17:44:26 +0800</pubDate><guid>https://wolanx.com/posts/article/hugo-+-github-action-%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22022%E7%89%88/</guid><description>https://blog.csdn.net/wolanx/article/details/122857729 Intro # 免费个人博客 的教程非常的 多，但大多面向 纯小白，反而对有一定基础的同学显得 落后 + 啰嗦，本文整合目前已知最好的方式，最快捷优雅的搞定一个博客，并给出 常见错误。
知识点 # hugo 的安装及使用不是本文重点，其实同理 hexo git github 默认已掌握 github page 生成可访问的页面的 灵魂 所在 github action 自动生成上一步 完整链路解析 # git commit 提交 触发 github action .github/workflows/my-pipeline.yml 并满足设置中的 on 条件 触发 pipeline 中的 steps checkout：相当与 git clone，并且后续操作具有 github 完整权限，可以通过 permissions 设置 setup hugo：准备构建要求，安装对应版本，注意是否需要 extended build：构建出静态文件，并输出到 public 文件夹 deploy：该插件来自 插件市场 自动创建分支 gh-pages 自动 copy public 到新分支 自动提交 自动生成 CNAME 文件，根据 cname 设置，想要 自定义域名 的注意这里了 打开 https://github.</description></item><item><title>logfmt python 实现</title><link>https://wolanx.com/posts/article/logfmt-python-%E5%AE%9E%E7%8E%B0/</link><pubDate>Fri, 11 Feb 2022 15:45:10 +0800</pubDate><guid>https://wolanx.com/posts/article/logfmt-python-%E5%AE%9E%E7%8E%B0/</guid><description>https://blog.csdn.net/wolanx/article/details/122733747 Intro # 现在很多主流日志系统推崇 logfmt 格式，但是 python 中配套的不多，这边给个参考
日志大概长这样
# log.info(&amp;#34;haha&amp;#34;) time=&amp;#34;2022-01-28T17:00:52+0800&amp;#34; type=default level=info method=&amp;#34;a.py:82&amp;#34; msg=&amp;#34;haha&amp;#34; # log.warning(&amp;#34;no access&amp;#34;) time=&amp;#34;2022-01-28T17:00:52+0800&amp;#34; type=default level=warning method=&amp;#34;a.py:83&amp;#34; msg=&amp;#34;no access&amp;#34; 实现过程 # PiiLogger 继承 logging.Logger 绑定自定义的 formatter 清空原有 handler 否则会重复输出 把 formatter 注册给 handler hook 外层 变量 （如：每条log带上web请求的uuid） PiiLoggerFormatter 继承 logging.Formatter 实现 format 的 自定义，内嵌变量请参考 官方 LogRecord 属性 hook 外层 变量 外层变量的使用 # def getUUid(): v = None if has_request_context(): # 判断 flask web 的生命周期下 v = Pii.</description></item><item><title>python 使用 reportlab 生成 pdf</title><link>https://wolanx.com/posts/article/python-%E4%BD%BF%E7%94%A8-reportlab-%E7%94%9F%E6%88%90-pdf/</link><pubDate>Wed, 09 Feb 2022 15:30:51 +0800</pubDate><guid>https://wolanx.com/posts/article/python-%E4%BD%BF%E7%94%A8-reportlab-%E7%94%9F%E6%88%90-pdf/</guid><description>https://blog.csdn.net/wolanx/article/details/122828185 Intro # 项目中遇到需要 导出统计报表 等业务时，通常需要 pdf 格式。python 中比较有名的就是 reportlab 。 这边通过几个小 demo 快速演示常用 api。所有功能点 源码 都在 使用场景。
一句话了解：跟 css 差不多，就是不断地对每样东西设置 style，然后把 style 和内容绑定。
功能点 # 生成 文件： 先 SimpleDocTemplate(&amp;lsquo;xxx.pdf&amp;rsquo;)，然后 build 流文件：先 io.BytesIO() 生成句柄，然后同理 曲线图 LinePlot 饼图 Pie 文字 Paragraph fontSize 字体大小 推荐 14 加粗 &amp;lt;b&amp;gt;xxx&amp;lt;/b&amp;gt; 使用的是 html 的方式，字体自动实现 firstLineIndent 首行缩进 推荐 2 * fontSize leading 行间距 推荐 1.5 * fontSize fontName 默认中文会变成 ■ 下载 .</description></item><item><title>5种底层能力</title><link>https://wolanx.com/posts/other/5-key-area/</link><pubDate>Sat, 29 Jan 2022 09:49:47 +0800</pubDate><guid>https://wolanx.com/posts/other/5-key-area/</guid><description>真正厉害的工程师，都在修炼这5种底层能力 https://mp.weixin.qq.com/s/HpFS3jbmHPLKtdyNmflJZQ 6个职级 # 职级一共分六级
E1 - 助理工程师（Associate Engineer） E2 - 工程师（Engineer） E3 - 高级工程师（Senior Engineer） E4 - 资深工程师（Staff Engineer） E5 - 高级资深工程师（Senior Staff Engineer） E6 - 首席工程师（Principal Engineer） 5个关键区 # 评估的纬度共分5个关键区（Key area），关键区再细分为15个价值（Value）维度，价值维度再细分为27个胜任力（Competency）纬度。
技术技能（Technical skills） 交付（Delivery） 反馈、沟通和协作（Feedback，Communication，Collaboration） 领导力（Leadership） 战略性影响（Strategic Impact） 影响力范围 # 各个工程级别的最主要差异在所能hold住的工作的范围（scope），或者说影响力范围，其中： E1～E3属于独立贡献者（individual contributor），工作范围有限，偏任务执行（Execution of Work）。 E4～E6能够善用人力（一般要带团队）和产品等杠杆进行规模化的生产（Utilizing skills to scale and generate leverage）。 职级越高越偏向战略方向、理念和文化建设。
E1：任务范围内 E2：项目范围内 E3：小组/团队内 E4：整个团队范围 E5：几个相关团队范围 E6：整个技术部门甚至公司 职级和胜任力评估框架 # 技术技能 质量和测试-写代码 质量和测试-测试 质量和测试-调试 质量和测试-可观测性 软件设计和架构-理解领域（domain） 软件设计和架构-软件架构 软件设计和架构-安全 交付 增量价值交付-任务分解 增量价值交付-优先级和依赖分析 增量价值交付-应对不确定性 自我组织-可信赖和责任感 自我组织-经济思维 反馈、沟通和协作 反馈-提供反馈 反馈-寻求和接收反馈 沟通-有效沟通 沟通-知识分享 协作-团队合作 协作-关系建设 协作-解决分歧 领导力 推进对齐 流程思考 协调促进 教导 战略性影响 业务敏锐和战略-业务敏锐 业务敏锐和战略-战略工作 业务敏锐和战略-产品思维 Demo # 软件设计和架构-软件架构：</description></item><item><title>Arthas</title><link>https://wolanx.com/posts/java/arthas/</link><pubDate>Thu, 27 Jan 2022 20:10:57 +0800</pubDate><guid>https://wolanx.com/posts/java/arthas/</guid><description>Intro # Java 诊断工具 Arthas 入门教程 https://start.aliyun.com/course?id=qDlgqpBT 进阶 命令 https://arthas.aliyun.com/doc/advanced-use.html Install # wget https://arthas.aliyun.com/arthas-boot.jar use java &amp;gt; 8 when jre tool.java
Start # java -jar arthas-boot.jar # input pid help dashboard thread 1 thread 1 | grep &amp;#39;main(&amp;#39; sc -d *MathGame # 查找JVM里已加载的类 jad demo.MathGame # 反编译代码 watch demo.MathGame primeFactors returnObj # 查看函数的参数/返回值/异常信息</description></item><item><title>算法总结</title><link>https://wolanx.com/posts/algo/algo/</link><pubDate>Tue, 25 Jan 2022 12:00:00 +0800</pubDate><guid>https://wolanx.com/posts/algo/algo/</guid><description>Intro # 重学算法，之前停留在学习基本思想比如 leetcode#704，但是问题衍生出来的实际问题直接看不懂 leetcode#475。 重新以实际题的方式去了解
二分 # 单调性 000111找突变边界 使用主动与被动不同的视角看 704. 二分查找 https://leetcode-cn.com/problems/binary-search/ 278. 第一个错误的版本 https://leetcode-cn.com/problems/first-bad-version/ 475. 供暖器 https://leetcode-cn.com/problems/heaters/ 540. 有序数组中的单一元素 https://leetcode-cn.com/problems/single-element-in-a-sorted-array/ 240. 搜索二维矩阵 II https://leetcode-cn.com/problems/search-a-2d-matrix-ii/ 875. 爱吃香蕉的珂珂 https://leetcode-cn.com/problems/koko-eating-bananas/ 611. 有效三角形的个数 https://leetcode-cn.com/problems/valid-triangle-number/ 1760. 袋子里最少数目的球 https://leetcode-cn.com/problems/minimum-limit-of-balls-in-a-bag/ 300. 最长递增子序列 https://leetcode-cn.com/problems/longest-increasing-subsequence/ 1011. 在 D 天内送达包裹的能力 https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/ 动态规划 #</description></item><item><title>hugo-book</title><link>https://wolanx.com/posts/tool/hugo/</link><pubDate>Thu, 20 Jan 2022 22:17:51 +0800</pubDate><guid>https://wolanx.com/posts/tool/hugo/</guid><description>Intro # 本站使用 博客系统hugo，搭配主题hugo-book
hugo https://gohugo.io/getting-started/quick-start/ hugo-book 官方demo https://hugo-book-demo.netlify.app/posts/migrate-from-jekyll/ 代码demo https://github1s.com/alex-shpak/hugo-book Start # # 本地测试 hugo server -w # add hugo new posts/xxx.md Guide # Intro Install Start Packages Contributing About License Test # MacOS MacOS Content # Linux Linux Content # Windows Windows Content # 百度统计 # 自定义 layouts/partials/docs/inject/footer.html</description></item><item><title>Markdown</title><link>https://wolanx.com/posts/article/markdown/</link><pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/article/markdown/</guid><description>From csdn
欢迎使用Markdown编辑器 # 你好！ 这是你第一次使用 Markdown编辑器 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。
新的改变 # 我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：
全新的界面设计 ，将会带来全新的写作体验； 在创作中心设置你喜爱的代码高亮样式，Markdown 将代码片显示选择的高亮样式 进行展示； 增加了 图片拖拽 功能，你可以将本地的图片直接拖拽到编辑区域直接展示； 全新的 KaTeX数学公式 语法； 增加了支持甘特图的mermaid语法1 功能； 增加了 多屏幕编辑 Markdown文章功能； 增加了 焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置 等功能，功能按钮位于编辑区域与预览区域中间； 增加了 检查列表 功能。 功能快捷键 # 撤销：Ctrl/Command+ Z重做：Ctrl/Command+ Y加粗：Ctrl/Command+ B斜体：Ctrl/Command+ I标题：Ctrl/Command+ Shift+ H无序列表：Ctrl/Command+ Shift+ U有序列表：Ctrl/Command+ Shift+ O检查列表：Ctrl/Command+ Shift+ C插入代码：Ctrl/Command+ Shift+ K插入链接：Ctrl/Command+ Shift+ L插入图片：Ctrl/Command+ Shift+ G查找：Ctrl/Command+ F替换：Ctrl/Command+ G合理的创建标题，有助于目录的生成 # 直接输入1次#，并按下space后，将生成1级标题。 输入2次#，并按下space后，将生成2级标题。 以此类推，我们支持6级标题。有助于使用TOC语法后生成一个完美的目录。
如何改变文本的样式 # 强调文本 强调文本</description></item><item><title>alias</title><link>https://wolanx.com/posts/linux/alias/</link><pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/linux/alias/</guid><description>方法 1 alias # alias tfa=&amp;lsquo;terraform apply &amp;ndash;auto-approve&amp;rsquo;
方法 2 ln # ln -sf /c/Program\ Files/Notepad++/notepad++.exe .
方法 3 sh # $ cat pad #!/bin/sh /c/Program\ Files/Notepad++/notepad++.exe $*</description></item><item><title>工程化虚拟机 vagrant</title><link>https://wolanx.com/posts/tool/vagrant/</link><pubDate>Mon, 10 Jan 2022 12:00:00 +0800</pubDate><guid>https://wolanx.com/posts/tool/vagrant/</guid><description>Intro # 快速可自定义的虚拟机，几行命令搞定，不用再设置一堆东西。 自定义文件Vagrantfile实现环境重复利用 https://www.vagrantup.com/intro Install # https://www.vagrantup.com/downloads # wget https://releases.hashicorp.com/vagrant/2.2.19/vagrant_2.2.19_x86_64.msi Start # vagrant init generic/alpine312 # https://vagrantcloud.com/search vagrant up --provider=hyperv # start vagrant halt # stop vagrant ssh vagrant destroy # delete Other # vagrant box list # list image vagrant global-status # list vm vagrant destroy 1a2b3c4d # 手动下包 wget https://app.vagrantup.com/generic/boxes/alpine312/versions/3.6.4/providers/hyperv.box vagrant box add my/alpine312 hyperv.box # 127.0.0.1:2222 # root vagrant Vagrantfile # # touch Vagrantfile Vagrant.</description></item><item><title>debian</title><link>https://wolanx.com/posts/linux/debian/</link><pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/linux/debian/</guid><description>加速 # # backup cp /etc/apt/sources.list /etc/apt/sources.list.bak sed &amp;#39;s/deb.debian.org/mirrors.aliyun.com/g&amp;#39; /etc/apt/sources.list sed &amp;#39;s/security.debian.org/mirrors.aliyun.com/g&amp;#39; /etc/apt/sources.list # run sed -i &amp;#39;s/deb.debian.org/mirrors.aliyun.com/g&amp;#39; /etc/apt/sources.list sed -i &amp;#39;s/security.debian.org/mirrors.aliyun.com/g&amp;#39; /etc/apt/sources.list apt-get update -y common # apt-get install procps # top ps apt-get install net-tools apt-get install iputils-ping apt-get install apt-transport-https ca-certificates # https user # adduser new_user usermod -G sudo new_user # 将用户添加到sudo组中 su - new_user vi bug 方向键 # vi /etc/vim/vimrc.tiny set nocompatible set backspace=2 ubuntu 加速 # cp /etc/apt/sources.</description></item><item><title>k3s</title><link>https://wolanx.com/posts/docker/k3s/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/docker/k3s/</guid><description>k3s # Lightweight Kubernetes
# start k3s server --docker --no-deploy=traefik # systemd /etc/systemd/system/k3s.service journalctl -u k3s -f # 日志 config # cd /var/lib/rancher/k3s/server/manifests /etc/rancher/k3s/k3s.yaml install # curl -sfL https://get.k3s.io | sh - # images wget https://github.com/rancher/k3s/releases/download/v1.0.0/k3s-airgap-images-amd64.tar docker load --input k3s-airgap-images-amd64.tar # download k3s bin wget https://github.com/rancher/k3s/releases/download/v1.17.4%2Bk3s1/k3s cp k3s /usr/local/bin/ chmod 777 /usr/local/bin/k3s curl -sfL https://get.k3s.io &amp;gt; ~/a.sh # reinstall cp /usr/local/bin/k3s ~/k3s cp ~/k3s /usr/local/bin/k3s INSTALL_K3S_SKIP_DOWNLOAD=true sh a.</description></item><item><title>k8s</title><link>https://wolanx.com/posts/docker/k8s/</link><pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/docker/k8s/</guid><description>auth api # # cd /var/run/secrets/kubernetes.io/serviceaccount 默认token目录 CA_CERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace) curl --cacert $CA_CERT -H &amp;#34;Authorization: Bearer $TOKEN&amp;#34; &amp;#34;https://10.10.18.158:6443/api/v1/namespaces/$NAMESPACE/services/&amp;#34; # 失败 需要 bind role k get clusterroles k -nccm-perf create rolebinding my-view --serviceaccount=ccm-perf:default --clusterrole=view k -nccm-perf create rolebinding my-view --serviceaccount=ccm-perf:default --clusterrole=admin k get rolebinding log app # 基于 Golang 的云原生日志采集服务设计与实践 https://mp.weixin.qq.com/s/3sCyWg-HwfZ4ymm8T9s4zg /var/lib/docker/containers/{}/{}-json.log /var/lib/kubelet/pods/{}/volumes/kubernetes.io~empty-dir/log pvc # volumes: - name: mypd persistentVolumeClaim: claimName: pvc-oss-test volumeMounts: - name: mypd mountPath: &amp;#34;/pvvv-test&amp;#34; helm # ## install wget https://get.</description></item><item><title>wsl 工具 Linux 的 Windows 子系统</title><link>https://wolanx.com/posts/linux/wsl/</link><pubDate>Wed, 08 May 2019 09:59:30 +0000</pubDate><guid>https://wolanx.com/posts/linux/wsl/</guid><description>wsl # Linux 的 Windows 子系统 https://docs.microsoft.com/zh-cn/windows/wsl/about cmd # wsl -l -v wsl --shutdown vim ~/.bashrc # alias d=&amp;#39;cd /mnt/d&amp;#39; alias e=&amp;#39;cd /mnt/e&amp;#39; alias z=&amp;#39;cd /mnt/z&amp;#39; fix # netsh winsock reset</description></item><item><title>kubectl</title><link>https://wolanx.com/posts/docker/kubectl/</link><pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/docker/kubectl/</guid><description>kubectl # 备忘录 https://kubernetes.io/docs/reference/kubectl/cheatsheet/ export KUBECONFIG=~/Desktop/www/work-book/env/sandbox/1_kubernetes/kubeconfig kubectl get pod -A kubectl run hello-minikube --image=zx5435/go-fs:v1 --port=8080 kubectl delete -n default deployment hello-minikube kubectl logs -f pod-gim-uat-app-2 kubectl logs --tail=50 -f pod-gim-uat-app-2 install # curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.16.0/bin/windows/amd64/kubectl.exe config # namespace # kubectl config set-context --current --namespace=$(basename $PWD) kubectl config set-context --current --namespace=ccm-perf kubectl config set-context $(kubectl config current-context) --namespace=ccm-perf run # kubectl run hello-minikube --image=zx5435/go-fs:v1 --port=8080 delete 批量 # kubectl -nccm-uat get pod --field-selector=status.</description></item><item><title>clash 设置</title><link>https://wolanx.com/posts/tool/clash/</link><pubDate>Wed, 04 Apr 2018 16:26:02 +0000</pubDate><guid>https://wolanx.com/posts/tool/clash/</guid><description>clash # # install win mac https://github.com/Fndroid/clash_for_windows_pkg/releases https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.19.12/Clash.for.Windows.Setup.0.19.12.exe D:\clash # setting https://docs.cfw.lbyczf.com/contents/quickstart.html https://portal.shadowsocks.nz/knowledgebase/182/ # shell host_ip=$(cat /etc/resolv.conf |grep &amp;#34;nameserver&amp;#34; |cut -f 2 -d &amp;#34; &amp;#34;) export ALL_PROXY=&amp;#34;http://$host_ip:7890&amp;#34; export ALL_PROXY=&amp;#34;http://127.0.0.1:7890&amp;#34; trojan # https://github.com/trojan-gfw/trojan/releases tar -xvf trojan-1.16.0-linux-amd64.tar.xz
&amp;ldquo;cert&amp;rdquo;: &amp;ldquo;/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem&amp;rdquo;,</description></item><item><title>docker app</title><link>https://wolanx.com/posts/docker/app/</link><pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/docker/app/</guid><description>infrastructure # portainer 管理 # docker run -d --restart=unless-stopped --name portainer -p 1234:9000 -v &amp;#34;/var/run/docker.sock:/var/run/docker.sock&amp;#34; portainer/portainer-ce:2.6.0 docker run -d --restart=unless-stopped --name portainer -p 1234:9000 -v &amp;#34;/var/run/docker.sock:/var/run/docker.sock&amp;#34; portainer/portainer:1.23.2 # //./pipe/docker_engine # &amp;#34;hosts&amp;#34;: [&amp;#34;tcp://0.0.0.0:2375&amp;#34;] server { listen 80; charset utf-8; server_name uat.docker.manager; location / { proxy_pass http://127.0.0.1:1234; proxy_http_version 1.1; proxy_set_header Connection &amp;#34;&amp;#34;; proxy_set_header Host $host; proxy_set_header Scheme $scheme; } } registry # DOCKER_OPTS=&amp;#34;--insecure-registry 192.168.1.19:5000&amp;#34; docker run -d -p 5000:5000 --restart=always --name registry registry:2.</description></item><item><title>docker 基础</title><link>https://wolanx.com/posts/docker/docker/</link><pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/docker/docker/</guid><description>doc # Docker学习笔记 https://segmentfault.com/a/1190000005930858 Docker 核心技术与实现原理 https://draveness.me/docker Docker 问答录（100 问） https://blog.lab99.org/post/docker-2016-07-14-faq.html Docker 实践系列文章 https://segmentfault.com/a/1190000006449675 install # # centos sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo yum list docker-ce --showduplicates | sort -r sudo yum install -y docker-ce # debian https://docs.docker.com/engine/install/debian/ # 开机启动 systemctl status docker systemctl enable docker service docker restart kill -SIGHUP $(pidof dockerd) config # cat &amp;gt; /etc/docker/daemon.json &amp;lt;&amp;lt; EOF { &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://registry.</description></item><item><title>docker-compose</title><link>https://wolanx.com/posts/docker/docker-compose/</link><pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/docker/docker-compose/</guid><description>docker-compose # docker-compose ps docker-compose logs --tail=100 -f docker-compose logs --tail=100 -f svc-web docker-compose restart svc-web install # # https://docs.docker.com/compose/install/#install-compose yum install -y docker-compose sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose docker-compose --version tpl # java + redis + influxdb # version: &amp;#34;3&amp;#34; services: svc-web: image: ghcr.io/wolanx/iothub-echo ports: - 1883:1883 - 18830:8080 entrypoint: java -cp /app/resources:/app/classes:/app/libs/* com.wolanx.echo.iothub.IotHubApplication volumes: - .:/root environment: - TZ=utc-8 - JVM=-XX:+UseContainerSupport - REDIS_HOST=svc-redis - INFLUXDB_HOST=svc-influxdb networks: - mynet svc-redis: image: redis:6.</description></item><item><title>php Dockerfile</title><link>https://wolanx.com/posts/docker/php.dockerfile/</link><pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/docker/php.dockerfile/</guid><description>2019-04-04 zst php:7.1.11 # docker pull zx5435/php:7.1.10
All version is small about 100mb, quick to download and running fast. They are cover my work in everywhere, you can try it. include:
mysql postgres redis mongo apcu gd xdebug bcmath zip FROM php:7.1.11-fpm-alpine RUN apk add --no-cache freetype libpng libjpeg-turbo freetype-dev libpng-dev libjpeg-turbo-dev \ &amp;amp;&amp;amp; apk add --no-cache --virtual .build-deps autoconf g++ libssh2 openssl openssl-dev make pcre-dev tree curl \ &amp;amp;&amp;amp; apk add --no-cache postgresql-dev \ &amp;amp;&amp;amp; docker-php-ext-configure gd \ --with-gd \ --with-freetype-dir=/usr/include/ \ --with-png-dir=/usr/include/ \ --with-jpeg-dir=/usr/include/ \ &amp;amp;&amp;amp; pecl install mongodb-1.</description></item><item><title>shell 脚本</title><link>https://wolanx.com/posts/linux/shell/</link><pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/linux/shell/</guid><description>sh # Shell 教程 http://www.runoob.com/linux/linux-shell.html 分享70个经典的 Shell 脚本面试题与答案 https://www.jb51.net/article/135168.htm 6条shell小技巧，让脚本显得不再业余 https://mp.weixin.qq.com/s/ixVK4ockNE46bTdmarsDHQ 常用小技巧 # #!/bin/bash set -o nounset # 变量必须存在 set -o errexit # set -e # bash -n xxx # 检查语法 set -o verbose # bash -v xxx set -o xtrace # bash -x xxx ## 函数封装 log () { local prefix=&amp;#34;[$(date +%Y/%m/%d\ %H:%M:%S)]:&amp;#34; echo &amp;#34;${prefix}$@&amp;#34; &amp;gt;&amp;amp;2 } log &amp;#34;INFO&amp;#34; &amp;#34;a message&amp;#34; ## 函数封装 ExactBashComments() { egrep &amp;#34;^#&amp;#34; } cat /etc/hosts | ExactBashComments | wc comments=$(ExactBashComments &amp;lt; /etc/hosts) ## 只读 默认值 readonly DEFAULT_VAL=${DEFAULT_VAL:--99} echo $DEFAULT_VAL # -99 ## if if [[ 100 &amp;gt; &amp;#34;${DEFAULT_VAL}&amp;#34; ]]; then echo 222 fi tsdb =&amp;gt; csv =&amp;gt; sql =&amp;gt; influx =&amp;gt; oss # # cd /z/wolanx/GiMC/src/backend/temp/mig # chcp.</description></item><item><title>idea</title><link>https://wolanx.com/posts/tool/jetbrain_idea/</link><pubDate>Mon, 25 Sep 2017 00:00:00 +0000</pubDate><guid>https://wolanx.com/posts/tool/jetbrain_idea/</guid><description>doc # webstorm下调试react js程序(不是在chrome里) https://www.jianshu.com/p/87a5609c5f44 Editor # General # Appearance # Show method separators 函数分割线 Tools # External Tools # pycharm black setting:
Program: black Arguments: $FileName$ Work dir: $FileDir$ Terminal # C:\Git\bin\sh.exe &amp;ndash;login -i</description></item><item><title>c demo</title><link>https://wolanx.com/posts/clang/clang/</link><pubDate>Fri, 13 Feb 2015 20:43:41 +0000</pubDate><guid>https://wolanx.com/posts/clang/clang/</guid><description>doc # 深入浅出让你理解什么是LLVM https://www.jianshu.com/p/1367dad95445 命令 # ### -E 预编译 `gcc -E -o a.e a.c` 把`/usr/include/stdio.h`的内容`include`过来,并`删除注释` ### -S 汇编 `gcc -S -o a.s a.c` `c`转化成`汇编` ### -c 编译 `gcc -c -o a.o a.s` `汇编`转化成`二进制机器指令` ### 链接 没参数 `gcc -o a a.o` ## 快速生成 rm -f a.out; cc a.c; ./a.out; `gcc a.c` = `gcc -o a a.c`</description></item></channel></rss>