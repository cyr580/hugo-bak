[{"id":0,"href":"/posts/tool/markdown/","title":"Markdown","section":"Blog","content":" From csdn\n 欢迎使用Markdown编辑器 #  你好！ 这是你第一次使用 Markdown编辑器 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。\n新的改变 #  我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：\n 全新的界面设计 ，将会带来全新的写作体验； 在创作中心设置你喜爱的代码高亮样式，Markdown 将代码片显示选择的高亮样式 进行展示； 增加了 图片拖拽 功能，你可以将本地的图片直接拖拽到编辑区域直接展示； 全新的 KaTeX数学公式 语法； 增加了支持甘特图的mermaid语法1 功能； 增加了 多屏幕编辑 Markdown文章功能； 增加了 焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置 等功能，功能按钮位于编辑区域与预览区域中间； 增加了 检查列表 功能。  功能快捷键 #  撤销：Ctrl/Command+ Z重做：Ctrl/Command+ Y加粗：Ctrl/Command+ B斜体：Ctrl/Command+ I标题：Ctrl/Command+ Shift+ H无序列表：Ctrl/Command+ Shift+ U有序列表：Ctrl/Command+ Shift+ O检查列表：Ctrl/Command+ Shift+ C插入代码：Ctrl/Command+ Shift+ K插入链接：Ctrl/Command+ Shift+ L插入图片：Ctrl/Command+ Shift+ G查找：Ctrl/Command+ F替换：Ctrl/Command+ G合理的创建标题，有助于目录的生成 #  直接输入1次#，并按下space后，将生成1级标题。 输入2次#，并按下space后，将生成2级标题。 以此类推，我们支持6级标题。有助于使用TOC语法后生成一个完美的目录。\n如何改变文本的样式 #  强调文本 强调文本\n加粗文本 加粗文本\n==标记文本==\n删除文本\n 引用文本\n H~2~O is是液体。\n2^10^ 运算结果是 1024.\n插入链接与图片 #  链接: link .\n图片: 带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30)\n居中的图片: 居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30)\n当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。\n如何插入一段漂亮的代码片 #  去博客设置 页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 代码片.\n// An highlighted block var foo = \u0026#39;bar\u0026#39;; 生成一个适合你的列表 #   项目  项目  项目       项目1 项目2 项目3   计划任务 完成任务  创建一个表格 #  一个简单的表格是这么创建的：\n   项目 Value     电脑 $1600   手机 $12   导管 $1    设定内容居中、居左、居右 #  使用:---------:居中 使用:----------居左 使用----------:居右\n   第一列 第二列 第三列     第一列文本居中 第二列文本居右 第三列文本居左    SmartyPants #  SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：\n   TYPE ASCII HTML     Single backticks 'Isn't this fun?' \u0026lsquo;Isn\u0026rsquo;t this fun?\u0026rsquo;   Quotes \u0026quot;Isn't this fun?\u0026quot; \u0026ldquo;Isn\u0026rsquo;t this fun?\u0026rdquo;   Dashes -- is en-dash, --- is em-dash \u0026ndash; is en-dash, \u0026mdash; is em-dash    创建一个自定义列表 #   Markdown Text-to-HTML conversion tool Authors John Luke  如何创建一个注脚 #  一个具有注脚的文本。2\n注释也是必不可少的 #  Markdown将文本转换为 HTML。\n*[HTML]: 超文本标记语言\nKaTeX数学公式 #  您可以使用渲染LaTeX数学表达式 KaTeX :\nGamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ 是通过欧拉积分\n$$ \\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt,. $$\n 你可以找到更多关于的信息 LaTeX 数学表达式here .\n 新的甘特图功能，丰富你的文章 #  gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section 现有任务 已完成 :done, des1, 2014-01-06,2014-01-08 进行中 :active, des2, 2014-01-09, 3d 计划一 : des3, after des2, 5d 计划二 : des4, after des3, 5d  关于 甘特图 语法，参考 这儿 ,  UML 图表 #  可以使用UML图表进行渲染。 Mermaid . 例如下面产生的一个序列图：\nsequenceDiagram 张三 -\u0026gt;\u0026gt; 李四: 你好！李四, 最近怎么样? 李四--\u0026gt;\u0026gt;王五: 你最近怎么样，王五？ 李四--x 张三: 我很好，谢谢! 李四-x 王五: 我很好，谢谢! Note right of 王五: 李四想了很长时间, 文字太长了\u0026lt;br/\u0026gt;不适合放在一行. 李四--\u0026gt;\u0026gt;张三: 打量着王五... 张三-\u0026gt;\u0026gt;王五: 很好... 王五, 你怎么样? 这将产生一个流程图。:\ngraph LR A[长方形] -- 链接 --\u0026gt; B((圆)) A --\u0026gt; C(圆角长方形) B --\u0026gt; D{菱形} C --\u0026gt; D  关于 Mermaid 语法，参考 这儿 ,  FLowchart流程图 #  我们依旧会支持flowchart的流程图：\nflowchat st=\u0026gt;start: 开始 e=\u0026gt;end: 结束 op=\u0026gt;operation: 我的操作 cond=\u0026gt;condition: 确认？ st-\u0026gt;op-\u0026gt;cond cond(yes)-\u0026gt;e cond(no)-\u0026gt;op  关于 Flowchart流程图 语法，参考 这儿 .  导出与导入 #  导出 #  如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 文章导出 ，生成一个.md文件或者.html文件进行本地保存。\n导入 #  如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入， 继续你的创作。\n  mermaid语法说明 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 注脚的解释\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "},{"id":1,"href":"/posts/docker/python.dockerfile/","title":"python Dockerfile","section":"Blog","content":"FROMpython:3.10.0-slimRUN sed -i \u0026#39;s/deb.debian.org/mirrors.aliyun.com/g\u0026#39; /etc/apt/sources.list \\  \u0026amp;\u0026amp; sed -i \u0026#39;s/security.debian.org/mirrors.aliyun.com/g\u0026#39; /etc/apt/sources.listRUN mkdir ~/.pip \\  \u0026amp;\u0026amp; echo \u0026#39;[global]\\n \\ trusted-host=mirrors.aliyun.com\\n \\ index-url=https://mirrors.aliyun.com/pypi/simple\\n \\ \u0026#39; \u0026gt; ~/.pip/pip.confRUN apt-get update -y \\  \u0026amp;\u0026amp; apt-get install -y gcc curl \\  \u0026amp;\u0026amp; apt-get install -y --no-install-recommends vim tree \\  \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/*RUN curl -s -L -o ~/rocketmq-client-cpp-2.0.0.amd64.deb \\  \u0026#39;https://github.com.cnpmjs.org/apache/rocketmq-client-cpp/releases/download/2.0.0/rocketmq-client-cpp-2.0.0.amd64.deb\u0026#39; \\  \u0026amp;\u0026amp; dpkg -i ~/rocketmq-client-cpp-2.0.0.amd64.deb \\  \u0026amp;\u0026amp; rm -f ~/rocketmq-client-cpp-2.0.0.amd64.debADD https://gfdcc-production-profile.oss-cn-shanghai.aliyuncs.com/profile/fonts/SourceHanSansCN-Normal.ttf /root/.fonts/ADD https://gfdcc-production-profile.oss-cn-shanghai.aliyuncs.com/profile/fonts/SourceHanSansCN-Bold.ttf /root/.fonts/RUN pip install --no-cache-dir --default-timeout=600 gunicorn==20.1.0 numpy==1.21.4 CPythonWORKDIR/www/backend-gimCOPY src/backend/requirements.txt .RUN pip install --no-cache-dir -r requirements.txt# todo#RUN apt-get -y --purge remove vim vim-runtime vim-common xxd cpp-8#RUN apt-get autoremove -yCMD [\u0026#34;gunicorn\u0026#34;, \u0026#34;run:app\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;./gunicorn.conf.py\u0026#34;]# docker build -f __cicd__/gimc.rt.Dockerfile -t registry.cn-shanghai.aliyuncs.com/digital-web/gimc-rt:20211203-1148 ."},{"id":2,"href":"/posts/article/hugo-+-github-action-%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22022%E7%89%88/","title":"hugo + github action 免费个人博客【2022版】","section":"Blog","content":" https://blog.csdn.net/wolanx/article/details/122857729  Intro #  免费个人博客 的教程非常的 多，但大多面向 纯小白，反而对有一定基础的同学显得 落后 + 啰嗦，本文整合目前已知最好的方式，最快捷优雅的搞定一个博客，并给出 常见错误。\n知识点 #   hugo 的安装及使用不是本文重点，其实同理 hexo git github 默认已掌握 github page 生成可访问的页面的 灵魂 所在 github action 自动生成上一步  完整链路解析 #   git commit 提交 触发 github action .github/workflows/my-pipeline.yml 并满足设置中的 on 条件 触发 pipeline 中的 steps  checkout：相当与 git clone，并且后续操作具有 github 完整权限，可以通过 permissions 设置 setup hugo：准备构建要求，安装对应版本，注意是否需要 extended build：构建出静态文件，并输出到 public 文件夹 deploy：该插件来自 插件市场  自动创建分支 gh-pages 自动 copy public 到新分支 自动提交 自动生成 CNAME 文件，根据 cname 设置，想要 自定义域名 的注意这里了     打开 https://github.com/{你的名字}/{你的仓库}/settings/pages（后续步骤只需要一次）  Source 选择 gh-pages ，文件夹: 默认 / (root) ，并 save 注意上方提示 Your site is ready to be published at https://xxx.github.io/xxx/  将域名部分做 解析 Custom domain 设置 自己的域名 Enforce HTTPS 点一下，然后等一会    步骤1：hugo github #  步骤1.1: 创建 仓库 \u0026amp; 初始化 hugo #   hugo github 的基本操作不是本文重点，忽略\n 步骤1.2: 创建 .gitmodules 文件 #  hugo 的 主题 themes 是通过 git 的 sub modules 实现，而 github 上 git 会自动根据 .gitmodules clone 子项目。没有 .gitmodules 文件会导致构建失败。 比如我的主题使用的是 hugo-book（推荐），那么配置如下\n[submodule \u0026#34;themes/hugo-book\u0026#34;] path = themes/hugo-book url = https://github.com/alex-shpak/hugo-book 步骤2：github action 自动生成 #  官方默认的 Jekyll 其实是会根据分支 自动 构建发布的，但如果自己魔改使用 hugo | hexo 这类软件以后就不会自动，需要使用 action 功能，而 action 其实就是 github 的 pipeline版本，使用只需要一个文件 .github/workflows/my-pipeline.yml。其中可能需要改的：\n main 分支 根据实际情况改一下 cname 最后一行 如果要使用自定义域名功能  步骤2.1: 创建 .github/workflows/my-pipeline.yml #  name: my-pipeline on: push: tags: - \u0026#39;*\u0026#39; branches: - main env: REGISTRY: ghcr.io IMAGE_NAME: ${{ github.repository }} jobs: build: runs-on: ubuntu-latest # permissions: # contents: read # packages: write concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: checkout uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: setup hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.92.0\u0026#39; extended: true - name: build run: hugo --minify - name: deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public # cname: wolanx.com # 重点 ！！！ 步骤3：github page 页面生成 #  打开 https://github.com/{你的名字}/{你的仓库}/settings/pages , 设置\n 没有 pages 功能：只有公开项目才有，私有 项目不支持 gh-pages 分支不存在：没有成功触发 action，成功触发，会自动生成分支 gh-pages，并将静态资源保存在 gh-pages 上 cname 一直被重置：.github/workflows/my-pipeline.yml 最后一行没有设置好 域名设置没用：需要先做 域名解析，如阿里云，参考如下，记录值 是 github page 页面上给出的值的域名部分，！！！域名部分！！！域名部分  源码参考 #   github.com/wolanx/blog  成品   总结 #  2022年了，很多原本复杂的东西，都已经变得非常的容易获得，但网上的文章常年不升级。根据本文方便你更好的白嫖到一个免费博客，如果需要支持自定义域名，阿里云上购买也不到100RMB。\n"},{"id":3,"href":"/posts/article/logfmt-python-%E5%AE%9E%E7%8E%B0/","title":"logfmt python 实现","section":"Blog","content":" https://blog.csdn.net/wolanx/article/details/122733747  Intro #  现在很多主流日志系统推崇 logfmt 格式，但是 python 中配套的不多，这边给个参考\n日志大概长这样\n# log.info(\u0026#34;haha\u0026#34;) time=\u0026#34;2022-01-28T17:00:52+0800\u0026#34; type=default level=info method=\u0026#34;a.py:82\u0026#34; msg=\u0026#34;haha\u0026#34; # log.warning(\u0026#34;no access\u0026#34;) time=\u0026#34;2022-01-28T17:00:52+0800\u0026#34; type=default level=warning method=\u0026#34;a.py:83\u0026#34; msg=\u0026#34;no access\u0026#34; 实现过程 #   PiiLogger 继承 logging.Logger  绑定自定义的 formatter 清空原有 handler 否则会重复输出 把 formatter 注册给 handler hook 外层 变量 （如：每条log带上web请求的uuid）   PiiLoggerFormatter 继承 logging.Formatter  实现 format 的 自定义，内嵌变量请参考 官方 LogRecord 属性  hook 外层 变量    外层变量的使用 #  def getUUid(): v = None if has_request_context(): # 判断 flask web 的生命周期下 v = Pii.app.get(\u0026#34;uuid\u0026#34;, \u0026#34;\u0026#34;) # 根据自己业务写 return {\u0026#34;uuid\u0026#34;: v} log = PiiLogger.manager.getLogger(\u0026#34;default\u0026#34;) log.withFormatter(getUUid) log.info(\u0026#34;haha\u0026#34;) # time=\u0026#34;2022-01-29T10:38:21+0800\u0026#34; type=default level=info method=\u0026#34;views.request_after\u0026#34; uuid=\u0026#34;860ea870-80ac-11ec-a366-1eaadecc49e8\u0026#34; msg=\u0026#34;haha\u0026#34; 完整代码 #  import logging import numbers from json.encoder import JSONEncoder from typing import Any class PiiLogger(logging.Logger): def __init__(self, name: str, level=logging.NOTSET) -\u0026gt; None: super().__init__(name, level) self.setLevel(logging.INFO) self.root.handlers.clear() ch = logging.StreamHandler() ch.setLevel(logging.INFO) self.formatter = PiiLoggerFormatter( fmt=\u0026#39;time=\u0026#34;%(asctime)s\u0026#34; type=%(name)slevel=%(levelname)smethod=\u0026#34;%(method)s\u0026#34;\u0026#39;, datefmt=\u0026#34;%Y-%m-%dT%H:%M:%S%z\u0026#34;, ) ch.setFormatter(self.formatter) self.addHandler(ch) def withFields(self, ret): print(ret) return self def withFormatter(self, func): self.formatter.setExt(func) class PiiLoggerFormatter(logging.Formatter): ext: Any = None def format(self, record): if record.funcName == \u0026#34;\u0026lt;module\u0026gt;\u0026#34;: method = f\u0026#34;{record.filename}:{record.lineno}\u0026#34; else: method = f\u0026#34;{record.module}.{record.funcName}\u0026#34; record.__setattr__(\u0026#34;method\u0026#34;, method) record.levelname = record.levelname.lower() msg = JSONEncoder().encode(str(record.msg)) ret = super().format(record) if self.ext: mor = logfmt(self.ext()) if mor: ret += \u0026#34; \u0026#34; + mor return f\u0026#34;{ret}msg={msg}\u0026#34; def setExt(self, func): self.ext = func def logfmt(extra): outarr = [] for k, v in extra.items(): if v is None: outarr.append(\u0026#34;%s=\u0026#34; % k) continue if isinstance(v, bool): v = \u0026#34;true\u0026#34; if v else \u0026#34;false\u0026#34; elif isinstance(v, numbers.Number): pass else: if isinstance(v, (dict, object)): v = str(v) v = \u0026#39;\u0026#34;%s\u0026#34;\u0026#39; % v.replace(\u0026#39;\u0026#34;\u0026#39;, \u0026#39;\\\\\u0026#34;\u0026#39;) outarr.append(\u0026#34;%s=%s\u0026#34; % (k, v)) return \u0026#34; \u0026#34;.join(outarr) PiiLogger.manager.setLoggerClass(PiiLogger) if __name__ == \u0026#34;__main__\u0026#34;: # use log = PiiLogger.manager.getLogger(\u0026#34;default\u0026#34;) log.info(\u0026#34;haha\u0026#34;) log.warning(\u0026#34;no access\u0026#34;) "},{"id":4,"href":"/posts/article/python-%E4%BD%BF%E7%94%A8-reportlab-%E7%94%9F%E6%88%90-pdf/","title":"python 使用 reportlab 生成 pdf","section":"Blog","content":" https://blog.csdn.net/wolanx/article/details/122828185  Intro #  项目中遇到需要 导出统计报表 等业务时，通常需要 pdf 格式。python 中比较有名的就是 reportlab 。 这边通过几个小 demo 快速演示常用 api。所有功能点 源码 都在 使用场景。\n 一句话了解：跟 css 差不多，就是不断地对每样东西设置 style，然后把 style 和内容绑定。\n 功能点 #   生成  文件： 先 SimpleDocTemplate(\u0026lsquo;xxx.pdf\u0026rsquo;)，然后 build 流文件：先 io.BytesIO() 生成句柄，然后同理   曲线图 LinePlot 饼图 Pie 文字 Paragraph  fontSize 字体大小 推荐 14 加粗 \u0026lt;b\u0026gt;xxx\u0026lt;/b\u0026gt; 使用的是 html 的方式，字体自动实现 firstLineIndent 首行缩进 推荐 2 * fontSize leading 行间距 推荐 1.5 * fontSize fontName 默认中文会变成 ■  下载 .ttf 文件 至少2个 【常规】【加粗】 注册字体 pdfmetrics.registerFont 【常规】请用原名，方便加粗的实现 注册字体库 registerFontFamily(\u0026ldquo;HanSans\u0026rdquo;, normal=\u0026ldquo;HanSans\u0026rdquo;, bold=\u0026ldquo;HanSans-Bold\u0026rdquo;)       其他 api 自行摸索，但基本离不开 css 那种理念。官网并没有常规文档的那种 md 模式，而是完全写在了 pdf 里，玩家需要自己去 pdf 里像查字典一样去找。官方文档  预览 #  完整代码 #  import os from reportlab.graphics.charts.lineplots import LinePlot from reportlab.graphics.charts.piecharts import Pie from reportlab.graphics.shapes import Drawing from reportlab.lib import colors from reportlab.lib.styles import ParagraphStyle from reportlab.pdfbase import pdfmetrics from reportlab.pdfbase.pdfmetrics import registerFontFamily from reportlab.pdfbase.ttfonts import TTFont from reportlab.platypus import Paragraph home = os.path.expanduser(\u0026#34;~\u0026#34;) try: pdfmetrics.registerFont(TTFont(\u0026#34;HanSans\u0026#34;, f\u0026#34;{home}/.fonts/SourceHanSansCN-Normal.ttf\u0026#34;)) pdfmetrics.registerFont(TTFont(\u0026#34;HanSans-Bold\u0026#34;, f\u0026#34;{home}/.fonts/SourceHanSansCN-Bold.ttf\u0026#34;)) registerFontFamily(\u0026#34;HanSans\u0026#34;, normal=\u0026#34;HanSans\u0026#34;, bold=\u0026#34;HanSans-Bold\u0026#34;) FONT_NAME = \u0026#34;HanSans\u0026#34; except: FONT_NAME = \u0026#34;Helvetica\u0026#34; class MyCSS: h3 = ParagraphStyle(name=\u0026#34;h3\u0026#34;, fontName=FONT_NAME, fontSize=14, leading=21, alignment=1) p = ParagraphStyle(name=\u0026#34;p\u0026#34;, fontName=FONT_NAME, fontSize=12, leading=18, firstLineIndent=24) class PiiPdf: @classmethod def doH3(cls, text: str): return Paragraph(text, MyCSS.h3) @classmethod def doP(cls, text: str): return Paragraph(text, MyCSS.p) @classmethod def doLine(cls): drawing = Drawing(500, 220) line = LinePlot() line.x = 50 line.y = 50 line.height = 125 line.width = 300 line.lines[0].strokeColor = colors.blue line.lines[1].strokeColor = colors.red line.lines[2].strokeColor = colors.green line.data = [((0, 50), (100, 100), (200, 200), (250, 210), (300, 300), (400, 800))] drawing.add(line) return drawing @classmethod def doChart(cls, data): drawing = Drawing(width=500, height=200) pie = Pie() pie.x = 150 pie.y = 65 pie.sideLabels = False pie.labels = [letter for letter in \u0026#34;abcdefg\u0026#34;] pie.data = data # list(range(15, 105, 15)) pie.slices.strokeWidth = 0.5 drawing.add(pie) return drawing 使用场景1：生成文件 #  doc = SimpleDocTemplate(\u0026#34;Hello.pdf\u0026#34;) p = PiiPdf() doc.build([ p.doH3(\u0026#34;\u0026lt;b\u0026gt;水泵能源消耗简报\u0026lt;/b\u0026gt;\u0026#34;), p.doH3(\u0026#34;\u0026lt;b\u0026gt;2021.12.1 ~ 2021.12.31\u0026lt;/b\u0026gt;\u0026#34;), p.doP(\u0026#34;该月接入能耗管理系统水泵系统 xx 套，水泵 x 台。\u0026#34;), p.doP(\u0026#34;本月最大总功率 xx kW，环比上月增加 xx %，平均功率 xx kW；环比上月增加 xx %。\u0026#34;), p.doP(\u0026#34;功率消耗趋势图：\u0026#34;), p.doLine(), p.doP(\u0026#34;本月总能耗 xxx kWh，环比上月增加 xx %。\u0026#34;), p.doP(\u0026#34;分水泵能耗统计：\u0026#34;), p.doChart(list(range(15, 105, 20))), p.doP(\u0026#34;其中能耗最高的水泵为：xxx， 环比上月增加 xxx kWh，xx %。\u0026#34;), ]) 使用场景2：web（flask） #  @Controller.get(\u0026#34;/api/pdf\u0026#34;) def api_hub_energy_pdf(): buffer = io.BytesIO()\t# 重点 起一个 io doc = SimpleDocTemplate(buffer) p = PiiPdf() doc.build([ p.doH3(\u0026#34;\u0026lt;b\u0026gt;2021.12.1 ~ 2021.12.31\u0026lt;/b\u0026gt;\u0026#34;), ]) buffer.seek(0) return Response(\t# io 形式返回 buffer, mimetype=\u0026#34;application/pdf\u0026#34;, headers={\u0026#34;Content-disposition\u0026#34;: \u0026#34;inline; filename=test.pdf\u0026#34;}, ) "},{"id":5,"href":"/posts/other/5-key-area/","title":"5种底层能力","section":"Blog","content":" 真正厉害的工程师，都在修炼这5种底层能力 https://mp.weixin.qq.com/s/HpFS3jbmHPLKtdyNmflJZQ  6个职级 #   职级一共分六级\n  E1 - 助理工程师（Associate Engineer） E2 - 工程师（Engineer） E3 - 高级工程师（Senior Engineer） E4 - 资深工程师（Staff Engineer） E5 - 高级资深工程师（Senior Staff Engineer） E6 - 首席工程师（Principal Engineer）  5个关键区 #   评估的纬度共分5个关键区（Key area），关键区再细分为15个价值（Value）维度，价值维度再细分为27个胜任力（Competency）纬度。\n  技术技能（Technical skills） 交付（Delivery） 反馈、沟通和协作（Feedback，Communication，Collaboration） 领导力（Leadership） 战略性影响（Strategic Impact）  影响力范围 #  各个工程级别的最主要差异在所能hold住的工作的范围（scope），或者说影响力范围，其中： E1～E3属于独立贡献者（individual contributor），工作范围有限，偏任务执行（Execution of Work）。 E4～E6能够善用人力（一般要带团队）和产品等杠杆进行规模化的生产（Utilizing skills to scale and generate leverage）。 职级越高越偏向战略方向、理念和文化建设。\n E1：任务范围内 E2：项目范围内 E3：小组/团队内 E4：整个团队范围 E5：几个相关团队范围 E6：整个技术部门甚至公司  职级和胜任力评估框架 #   技术技能  质量和测试-写代码 质量和测试-测试 质量和测试-调试 质量和测试-可观测性 软件设计和架构-理解领域（domain） 软件设计和架构-软件架构 软件设计和架构-安全   交付  增量价值交付-任务分解 增量价值交付-优先级和依赖分析 增量价值交付-应对不确定性 自我组织-可信赖和责任感 自我组织-经济思维   反馈、沟通和协作  反馈-提供反馈 反馈-寻求和接收反馈 沟通-有效沟通 沟通-知识分享 协作-团队合作 协作-关系建设 协作-解决分歧   领导力  推进对齐 流程思考 协调促进 教导   战略性影响  业务敏锐和战略-业务敏锐 业务敏锐和战略-战略工作 业务敏锐和战略-产品思维    Demo #  软件设计和架构-软件架构：\n   职级 胜任力     E1 对服务化架构有总体认识，在此基础上能够设计基本的服务/模块，同时尽量避免冗余代码/功能，减少对接口的不兼容变更。   E2 设计的服务要和总体服务化架构对齐（align with）。   E3 设计的服务/系统和总体架构始终对齐。能高效地利用抽象、模块化和重用机制。   E4 使用行业沉淀下来的成熟的设计模式来架构服务和系统，让团队可以增量和自治的开发，并考虑未来的扩展性。考虑未来的可能用例场景，在做设计决策时，以最小化未来变更成本为主要目标（也就是架构要灵活适应未来的变化）。   E5 在多个团队之间宣导能支持增量和自治开发的，并且能支持未来扩展的架构文化。指导多个团队考虑未来的可能用例场景，在做设计决策时，以最小化未来的变更成本为主要目标。   E6 在整个组织内宣导能支持增量和自治开发的，并且能支持未来扩展的架构文化。指导组织内的所有团队考虑未来的可能用例场景，在做设计决策时，以最小化未来的变更成本为目标。    "},{"id":6,"href":"/posts/java/arthas/","title":"Arthas","section":"Blog","content":"Intro #  Java 诊断工具 Arthas 入门教程 https://start.aliyun.com/course?id=qDlgqpBT 进阶 命令 https://arthas.aliyun.com/doc/advanced-use.html Install #  wget https://arthas.aliyun.com/arthas-boot.jar  use java \u0026gt; 8 when jre tool.java\n Start #  java -jar arthas-boot.jar # input pid help dashboard thread 1 thread 1 | grep \u0026#39;main(\u0026#39; sc -d *MathGame # 查找JVM里已加载的类 jad demo.MathGame # 反编译代码 watch demo.MathGame primeFactors returnObj # 查看函数的参数/返回值/异常信息 "},{"id":7,"href":"/posts/algo/algo/","title":"算法总结","section":"Blog","content":"Intro #  重学算法，之前停留在学习基本思想比如 leetcode#704，但是问题衍生出来的实际问题直接看不懂 leetcode#475。 重新以实际题的方式去了解\n二分 #   单调性 000111找突变边界 使用主动与被动不同的视角看     704. 二分查找 https://leetcode-cn.com/problems/binary-search/   278. 第一个错误的版本 https://leetcode-cn.com/problems/first-bad-version/   475. 供暖器 https://leetcode-cn.com/problems/heaters/   540. 有序数组中的单一元素 https://leetcode-cn.com/problems/single-element-in-a-sorted-array/   240. 搜索二维矩阵 II https://leetcode-cn.com/problems/search-a-2d-matrix-ii/   875. 爱吃香蕉的珂珂 https://leetcode-cn.com/problems/koko-eating-bananas/   611. 有效三角形的个数 https://leetcode-cn.com/problems/valid-triangle-number/   1760. 袋子里最少数目的球 https://leetcode-cn.com/problems/minimum-limit-of-balls-in-a-bag/   300. 最长递增子序列 https://leetcode-cn.com/problems/longest-increasing-subsequence/   1011. 在 D 天内送达包裹的能力 https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/   动态规划 #  "},{"id":8,"href":"/posts/tool/hugo/","title":"hugo-book","section":"Blog","content":"Intro #  本站使用 博客系统hugo，搭配主题hugo-book\n hugo  https://gohugo.io/getting-started/quick-start/    hugo-book  官方demo https://hugo-book-demo.netlify.app/posts/migrate-from-jekyll/  代码demo https://github1s.com/alex-shpak/hugo-book     Start #  # 本地测试 hugo server -w # add hugo new posts/xxx.md Guide #  Intro Install Start Packages Contributing About License Test #  MacOS MacOS Content #  Linux Linux Content #  Windows Windows Content #   "},{"id":9,"href":"/posts/tool/vagrant/","title":"vagrant","section":"Blog","content":"Intro #  快速可自定义的虚拟机，几行命令搞定，不用再设置一堆东西。 自定义文件Vagrantfile实现环境重复利用 https://www.vagrantup.com/intro Install #  https://www.vagrantup.com/downloads # wget https://releases.hashicorp.com/vagrant/2.2.19/vagrant_2.2.19_x86_64.msi Start #  vagrant init generic/alpine312 # https://vagrantcloud.com/search vagrant up --provider=hyperv # start vagrant halt # stop vagrant ssh vagrant destroy # delete Other #  vagrant box list # list image vagrant global-status # list vm vagrant destroy 1a2b3c4d # 手动下包 wget https://app.vagrantup.com/generic/boxes/alpine312/versions/3.6.4/providers/hyperv.box vagrant box add my/alpine312 hyperv.box # 127.0.0.1:2222 # root vagrant Vagrantfile #  # touch Vagrantfile Vagrant.configure(\u0026#34;2\u0026#34;) do |config| config.vm.box = \u0026#34;generic/alpine312\u0026#34; end "},{"id":10,"href":"/posts/linux/debian/","title":"debian","section":"Blog","content":"加速 #  # backup cp /etc/apt/sources.list /etc/apt/sources.list.bak sed \u0026#39;s/deb.debian.org/mirrors.aliyun.com/g\u0026#39; /etc/apt/sources.list sed \u0026#39;s/security.debian.org/mirrors.aliyun.com/g\u0026#39; /etc/apt/sources.list # run sed -i \u0026#39;s/deb.debian.org/mirrors.aliyun.com/g\u0026#39; /etc/apt/sources.list sed -i \u0026#39;s/security.debian.org/mirrors.aliyun.com/g\u0026#39; /etc/apt/sources.list apt-get update -y common #  apt-get install procps # top ps apt-get install net-tools apt-get install iputils-ping apt-get install apt-transport-https ca-certificates # https vi bug #  vi /etc/vim/vimrc.tiny set nocompatible set backspace=2 "},{"id":11,"href":"/posts/docker/k3s/","title":"k3s","section":"Blog","content":"k3s #   Lightweight Kubernetes\n # start k3s server --docker --no-deploy=traefik # systemd /etc/systemd/system/k3s.service journalctl -u k3s -f # 日志 config #  cd /var/lib/rancher/k3s/server/manifests /etc/rancher/k3s/k3s.yaml install #  curl -sfL https://get.k3s.io | sh - # images wget https://github.com/rancher/k3s/releases/download/v1.0.0/k3s-airgap-images-amd64.tar docker load --input k3s-airgap-images-amd64.tar # download k3s bin wget https://github.com/rancher/k3s/releases/download/v1.17.4%2Bk3s1/k3s cp k3s /usr/local/bin/ chmod 777 /usr/local/bin/k3s curl -sfL https://get.k3s.io \u0026gt; ~/a.sh # reinstall cp /usr/local/bin/k3s ~/k3s cp ~/k3s /usr/local/bin/k3s INSTALL_K3S_SKIP_DOWNLOAD=true sh a.sh server --docker --no-deploy=traefik [INFO] Finding latest release [INFO] Using v1.0.0 as release [INFO] Downloading hash https://github.com/rancher/k3s/releases/download/v1.0.0/sha256sum-amd64.txt [INFO] Downloading binary https://github.com/rancher/k3s/releases/download/v1.0.0/k3s [INFO] Verifying binary download [INFO] Installing k3s to /usr/local/bin/k3s which: no kubectl in (/root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin) [INFO] Creating /usr/local/bin/kubectl symlink to k3s which: no crictl in (/root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin) [INFO] Creating /usr/local/bin/crictl symlink to k3s which: no ctr in (/root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin) [INFO] Creating /usr/local/bin/ctr symlink to k3s [INFO] Creating killall script /usr/local/bin/k3s-killall.sh [INFO] Creating uninstall script /usr/local/bin/k3s-uninstall.sh [INFO] env: Creating environment file /etc/systemd/system/k3s.service.env [INFO] systemd: Creating service file /etc/systemd/system/k3s.service [INFO] systemd: Enabling k3s unit Created symlink from /etc/systemd/system/multi-user.target.wants/k3s.service to /etc/systemd/system/k3s.service. [INFO] systemd: Starting k3s "},{"id":12,"href":"/posts/docker/k8s/","title":"k8s","section":"Blog","content":"auth api #  # cd /var/run/secrets/kubernetes.io/serviceaccount 默认token目录 CA_CERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace) curl --cacert $CA_CERT -H \u0026#34;Authorization: Bearer $TOKEN\u0026#34; \u0026#34;https://10.10.18.158:6443/api/v1/namespaces/$NAMESPACE/services/\u0026#34; # 失败 需要 bind role k get clusterroles k -nccm-perf create rolebinding my-view --serviceaccount=ccm-perf:default --clusterrole=view k -nccm-perf create rolebinding my-view --serviceaccount=ccm-perf:default --clusterrole=admin k get rolebinding log app #   基于 Golang 的云原生日志采集服务设计与实践 https://mp.weixin.qq.com/s/3sCyWg-HwfZ4ymm8T9s4zg   /var/lib/docker/containers/{}/{}-json.log /var/lib/kubelet/pods/{}/volumes/kubernetes.io~empty-dir/log pvc #  volumes: - name: mypd persistentVolumeClaim: claimName: pvc-oss-test volumeMounts: - name: mypd mountPath: \u0026#34;/pvvv-test\u0026#34; helm #  ## install wget https://get.helm.sh/helm-v2.16.0-linux-amd64.tar.gz tar -zxvf helm-v2.16.0-linux-amd64.tar.gz mv linux-amd64/helm /usr/local/bin/ ## helm init kubectl create serviceaccount --namespace kube-system tiller kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller helm init --service-account tiller --upgrade helm install stable/redis --name redis "},{"id":13,"href":"/posts/linux/wsl/","title":"wsl 工具 Linux 的 Windows 子系统","section":"Blog","content":"wsl #   Linux 的 Windows 子系统 https://docs.microsoft.com/zh-cn/windows/wsl/about   cmd #  wsl -l -v wsl --shutdown vim ~/.bashrc #  alias d=\u0026#39;cd /mnt/d\u0026#39; alias e=\u0026#39;cd /mnt/e\u0026#39; alias z=\u0026#39;cd /mnt/z\u0026#39; fix #  netsh winsock reset\n"},{"id":14,"href":"/posts/docker/kubectl/","title":"kubectl","section":"Blog","content":"kubectl #   备忘录 https://kubernetes.io/docs/reference/kubectl/cheatsheet/   export KUBECONFIG=~/Desktop/www/work-book/env/sandbox/1_kubernetes/kubeconfig kubectl get pod -A kubectl run hello-minikube --image=zx5435/go-fs:v1 --port=8080 kubectl delete -n default deployment hello-minikube kubectl logs -f pod-gim-uat-app-2 kubectl logs --tail=50 -f pod-gim-uat-app-2 install #  curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.16.0/bin/windows/amd64/kubectl.exe config #  namespace #  kubectl config set-context --current --namespace=$(basename $PWD) kubectl config set-context --current --namespace=ccm-perf kubectl config set-context $(kubectl config current-context) --namespace=ccm-perf run #  kubectl run hello-minikube --image=zx5435/go-fs:v1 --port=8080 delete 批量 #  kubectl -nccm-uat get pod --field-selector=status.phase!=Running kubectl -nccm-uat get pod --field-selector=status.phase==Failed port-forward #  # outside:inside 左外右内 kubectl -nzx5435 port-forward --address 0.0.0.0 service/air-ticket 7777:80 kubectl -nzx5435 expose deployment air-ticket --type=LoadBalancer --name=my-service configmap #  kubectl -nccm-perf create configmap mq-conf --from-file=activemq kustomize #  kubectl builtins #  # kustomization.yaml # k apply -k config/ apiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization generatorOptions: # disableNameSuffixHash: true labels: type: generated annotations: note: generated configMapGenerator: - name: gim-fs files: - pii.yml - activemq.xml - broker.ks - name: ept-env literals: - ACTIVEMQ_PASSWORD=admin install #  # install curl -s \u0026#34;https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh\u0026#34; | bash kustomize build | kubectl apply -f - config tpl #  # kustomization.yaml namespace: gimc-prod generatorOptions: # disableNameSuffixHash: true labels: type: generated annotations: note: generated configMapGenerator: - name: gimc-cfgs files: - pii.yml - name: ept-env literals: - MYSQL_DB_NAME=gimc-prod secretGenerator: - name: gimc-https files: - tls.key - tls.crt "},{"id":15,"href":"/posts/tool/clash/","title":"clash 设置","section":"Blog","content":"clash #  # install https://github.com/Fndroid/clash_for_windows_pkg/releases https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.19.12/Clash.for.Windows.Setup.0.19.12.exe D:\\clash # setting https://docs.cfw.lbyczf.com/contents/quickstart.html https://portal.shadowsocks.nz/knowledgebase/182/ # shell host_ip=$(cat /etc/resolv.conf |grep \u0026#34;nameserver\u0026#34; |cut -f 2 -d \u0026#34; \u0026#34;) export ALL_PROXY=\u0026#34;http://$host_ip:7890\u0026#34; export ALL_PROXY=\u0026#34;http://127.0.0.1:7890\u0026#34; trojan #  https://github.com/trojan-gfw/trojan/releases tar -xvf trojan-1.16.0-linux-amd64.tar.xz\n\u0026ldquo;cert\u0026rdquo;: \u0026ldquo;/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem\u0026rdquo;,\n"},{"id":16,"href":"/posts/docker/app/","title":"docker app","section":"Blog","content":"infrastructure #  portainer 管理 #  docker run -d --restart=unless-stopped --name portainer -p 1234:9000 -v \u0026#34;/var/run/docker.sock:/var/run/docker.sock\u0026#34; portainer/portainer-ce:2.6.0 docker run -d --restart=unless-stopped --name portainer -p 1234:9000 -v \u0026#34;/var/run/docker.sock:/var/run/docker.sock\u0026#34; portainer/portainer:1.23.2 # //./pipe/docker_engine # \u0026#34;hosts\u0026#34;: [\u0026#34;tcp://0.0.0.0:2375\u0026#34;] server { listen 80; charset utf-8; server_name uat.docker.manager; location / { proxy_pass http://127.0.0.1:1234; proxy_http_version 1.1; proxy_set_header Connection \u0026#34;\u0026#34;; proxy_set_header Host $host; proxy_set_header Scheme $scheme; } } registry #  DOCKER_OPTS=\u0026#34;--insecure-registry 192.168.1.19:5000\u0026#34; docker run -d -p 5000:5000 --restart=always --name registry registry:2.6.2 docker push 192.168.199.115:5000/r1 docker rmi 192.168.199.115:5000/r1 docker pull 192.168.199.115:5000/r1 # /var/lib/registry/docker/registry/v2 # tree -L 4 cadvisor #  sudo docker run \\  --volume=/:/rootfs:ro \\  --volume=/var/run:/var/run:rw \\  --volume=/sys:/sys:ro \\  --volume=/var/lib/docker/:/var/lib/docker:ro \\  --volume=/dev/disk/:/dev/disk:ro \\  --publish=2345:8080 \\  --detach=true \\  --name=cadvisor \\  google/cadvisor:v0.28.3 db #  mysql #  docker run --restart=unless-stopped --name mysql-1 -it -d \\  -v \u0026#34;$PWD\u0026#34;:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password -e TZ=Asia/Shanghai mysql:8.0.15 \\  --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci # --character-set-server=utf8 --collation-server=utf8_general_ci redis #  docker run --restart=unless-stopped --name redis-1 -d -p 6379:6379 redis:6.0.3-alpine docker run --restart=unless-stopped --name redis-1 -d -p 6379:6379 redis:3.2.9-alpine docker run --name some-redis -d redis:alpine docker run -it --link some-redis:redis --rm redis:alpine redis-cli -h 139.196.14.14 -p 6379 docker run --restart=unless-stopped -v \u0026#34;$PWD/redis.conf\u0026#34;:/usr/local/etc/redis/redis.conf -v \u0026#34;$PWD\u0026#34;:/data --name redis-2 -d -p 6379:6379 redis:3.2.9-alpine redis-server /usr/local/etc/redis/redis.conf redis-server --requirepass 12345 mongodb #  docker run --restart=unless-stopped --name mongo-1 -d -p 27017:27017 -v \u0026#34;$PWD\u0026#34;:/etc/mongo mongo:3.6.4 # 常用命令 show dbs # 全部db use test # 进database db # 查看当前database db.stats(); # 显示当前db状态 db.dropDatabase(); #删除当前使用数据库 # user show users; # 显示当前所有用户 db.createUser({user:\u0026#34;ynh-test\u0026#34;,pwd:\u0026#34;ynh-test\u0026#34;,roles:[{role:\u0026#34;userAdmin\u0026#34;,db:\u0026#34;ynh-test\u0026#34;}]}); # 创建用户 db.removeUser(\u0026#34;userName\u0026#34;); # 删除用户 db.tb_test.insert({\u0026#34;_id\u0026#34;:\u0026#34;520\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;xiaoming\u0026#34;}) db.tb_test.find(); phpmyadmin #  docker run --restart=unless-stopped --name pmd -d -p 33060:80 phpmyadmin/phpmyadmin:4.7 -e PMA_HOST=139.196.14.10 vi /etc/phpmyadmin/config.user.inc.php supervisorctl restart all other #  zentao 禅道 #  docker run -d -p 8880:80 \\ -e USER=\u0026#34;root\u0026#34; -e PASSWD=\u0026#34;password\u0026#34; \\ -e BIND_ADDRESS=\u0026#34;false\u0026#34; \\ -e SMTP_HOST=\u0026#34;163.177.90.125 smtp.exmail.qq.com\u0026#34; \\ -v \u0026#34;$PWD\u0026#34;:/opt/zbox/ \\ --name zentao-server \\ idoop/zentao:latest "},{"id":17,"href":"/posts/docker/docker/","title":"docker 基础","section":"Blog","content":"doc #   Docker学习笔记 https://segmentfault.com/a/1190000005930858  Docker 核心技术与实现原理 https://draveness.me/docker  Docker 问答录（100 问） https://blog.lab99.org/post/docker-2016-07-14-faq.html  Docker 实践系列文章 https://segmentfault.com/a/1190000006449675   install #  # centos sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo yum list docker-ce --showduplicates | sort -r sudo yum install -y docker-ce # debian https://docs.docker.com/engine/install/debian/ # 开机启动 systemctl status docker systemctl enable docker service docker restart kill -SIGHUP $(pidof dockerd) config #  cat \u0026gt; /etc/docker/daemon.json \u0026lt;\u0026lt; EOF { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://registry.docker-cn.com\u0026#34;], \u0026#34;log-opts\u0026#34;: {\u0026#34;max-size\u0026#34;: \u0026#34;500m\u0026#34;, \u0026#34;max-file\u0026#34;: \u0026#34;2\u0026#34;} } EOF { \u0026#34;debug\u0026#34;: true, \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://registry.docker-cn.com\u0026#34;], \u0026#34;log-driver\u0026#34;: \u0026#34;loki\u0026#34;, \u0026#34;log-opts\u0026#34;: { \u0026#34;max-size\u0026#34;: \u0026#34;500m\u0026#34;, \u0026#34;max-file\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;loki-url\u0026#34;: \u0026#34;http://192.168.2.238:3100/loki/api/v1/push\u0026#34; } } timezone 时区问题 #  TZ=utc-8 env: - name: TZ value: \u0026#34;utc-8\u0026#34; environment: TZ : \u0026#34;Asia/Shanghai\u0026#34; apk add tzdata --no-cache \\  \u0026amp;\u0026amp; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\  \u0026amp;\u0026amp; echo \u0026#34;Asia/Shanghai\u0026#34; \u0026gt; /etc/timezone #dpkg-reconfigure -f noninteractive tzdata ops #  log #  # 查看log大小 docker ps -q | xargs docker inspect --format=\u0026#34;{{.LogPath}}\u0026#34; | xargs ls -lh # nginx forword RUN ln -sf /dev/stdout /var/log/nginx/access.log \\ \t\u0026amp;\u0026amp; ln -sf /dev/stderr /var/log/nginx/error.log prune #  docker system prune -f docker image prune docker image prune -a --filter \u0026#34;until=72h\u0026#34; docker container prune -a --filter \u0026#34;until=72h\u0026#34; docker volume prune --filter \u0026#34;label!=keep\u0026#34; docker network prune --filter \u0026#34;until=24h\u0026#34; image proxy #  echo $CR_PAT | docker login ghcr.io -u zx5435 --password-stdin docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.16.0 docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.16.0 gcr.io/kubernetes-helm/tiller:v2.16.0 network #  iptables -t nat -L DOCKER -n \u0026ndash;line-numbers iptables -nL -t nat\n"},{"id":18,"href":"/posts/docker/docker-compose/","title":"docker-compose","section":"Blog","content":"docker-compose #  docker-compose ps docker-compose logs --tail=100 -f docker-compose logs --tail=100 -f svc-web docker-compose restart svc-web install #  # https://docs.docker.com/compose/install/#install-compose yum install -y docker-compose sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose docker-compose --version tpl #  java + redis + influxdb #  version: \u0026#34;3\u0026#34; services: svc-web: image: ghcr.io/wolanx/iothub-echo ports: - 1883:1883 - 18830:8080 entrypoint: java -cp /app/resources:/app/classes:/app/libs/* com.wolanx.echo.iothub.IotHubApplication volumes: - .:/root environment: - TZ=utc-8 - JVM=-XX:+UseContainerSupport - REDIS_HOST=svc-redis - INFLUXDB_HOST=svc-influxdb networks: - mynet svc-redis: image: redis:6.0.3-alpine ports: - 6379:6379 networks: - mynet svc-influxdb: image: influxdb:1.7.11 ports: - 8086:8086 environment: - TZ=utc-8 - INFLUXDB_ADMIN_USER=root - INFLUXDB_ADMIN_PASSWORD=root - INFLUXDB_DB=iothub - INFLUXDB_HTTP_ENABLED=true - INFLUXDB_HTTP_AUTH_ENABLED=true networks: - mynet networks: mynet: loki + grafana #  version: \u0026#34;3\u0026#34; services: svc-loki: image: grafana/loki:2.4.0 ports: - \u0026#34;3100:3100\u0026#34; - \u0026#34;9095:9095\u0026#34; command: -config.file=/etc/loki/local-config.yaml networks: - loki svc-grafana: image: grafana/grafana:latest ports: - \u0026#34;3000:3000\u0026#34; networks: - loki networks: loki: "},{"id":19,"href":"/posts/docker/php.dockerfile/","title":"php Dockerfile","section":"Blog","content":"2019-04-04 zst php:7.1.11 #   docker pull zx5435/php:7.1.10\n All version is small about 100mb, quick to download and running fast. They are cover my work in everywhere, you can try it. include:\n mysql postgres redis mongo apcu gd xdebug bcmath zip  FROM php:7.1.11-fpm-alpine RUN apk add --no-cache freetype libpng libjpeg-turbo freetype-dev libpng-dev libjpeg-turbo-dev \\  \u0026amp;\u0026amp; apk add --no-cache --virtual .build-deps autoconf g++ libssh2 openssl openssl-dev make pcre-dev tree curl \\  \u0026amp;\u0026amp; apk add --no-cache postgresql-dev \\  \u0026amp;\u0026amp; docker-php-ext-configure gd \\  --with-gd \\  --with-freetype-dir=/usr/include/ \\  --with-png-dir=/usr/include/ \\  --with-jpeg-dir=/usr/include/ \\  \u0026amp;\u0026amp; pecl install mongodb-1.5.2 redis apcu xdebug \\  \u0026amp;\u0026amp; docker-php-ext-enable mongodb redis apcu xdebug \\  \u0026amp;\u0026amp; docker-php-ext-install gd pdo_mysql opcache bcmath pgsql pdo_pgsql zip sockets \\  \u0026amp;\u0026amp; apk del .build-deps \\  \u0026amp;\u0026amp; pecl clear-cache \\  \u0026amp;\u0026amp; docker-php-source delete RUN curl https://getcomposer.org/composer.phar -o /usr/local/bin/composer \\  \u0026amp;\u0026amp; chmod +x /usr/local/bin/composer \\  \u0026amp;\u0026amp; mkdir -p /var/runtime \u0026amp;\u0026amp; chmod -R 777 /var/runtime \\  \u0026amp;\u0026amp; alias ll=\u0026#39;ls -l\u0026#39; # COPY __cicd__/php/php.ini /usr/local/etc/php/ # COPY __cicd__/php/www.conf /usr/local/etc/php-fpm.d/ # docker build -f Dockerfile.php -t zx5435/php:7.1.11 . 2019-03-07 amqp error #  librabbitmq pecl install amqp composer config -g repo.packagist composer https://packagist.phpcomposer.com 2018-10-09 bitdata php:7.1.10 #  FROM php:7.1.10-fpm-alpine RUN apk add --no-cache freetype libpng libjpeg-turbo freetype-dev libpng-dev libjpeg-turbo-dev \\  \u0026amp;\u0026amp; apk add --no-cache --virtual .build-deps autoconf g++ libssh2 openssl openssl-dev make pcre-dev \\  \u0026amp;\u0026amp; apk add --no-cache postgresql-dev \\  \u0026amp;\u0026amp; docker-php-ext-configure gd \\  --with-gd \\  --with-freetype-dir=/usr/include/ \\  --with-png-dir=/usr/include/ \\  --with-jpeg-dir=/usr/include/ \\  \u0026amp;\u0026amp; pecl install mongodb-1.5.2 redis apcu xdebug \\  \u0026amp;\u0026amp; docker-php-ext-enable mongodb redis apcu xdebug \\  \u0026amp;\u0026amp; docker-php-ext-install gd pdo_mysql opcache bcmath pgsql pdo_pgsql zip \\  \u0026amp;\u0026amp; apk del .build-deps \\  \u0026amp;\u0026amp; pecl clear-cache \\  \u0026amp;\u0026amp; docker-php-source delete RUN curl https://getcomposer.org/composer.phar -o /usr/local/bin/composer \\  \u0026amp;\u0026amp; chmod +x /usr/local/bin/composer \\  \u0026amp;\u0026amp; mkdir -p /var/runtime \u0026amp;\u0026amp; chmod -R 777 /var/runtime # COPY __cicd__/php/php.ini /usr/local/etc/php/ # COPY __cicd__/php/www.conf /usr/local/etc/php-fpm.d/ # docker build -f __cicd__/php/Dockerfile.runtime -t zx5435/php:7.1.10 . "},{"id":20,"href":"/posts/tool/jetbrain_idea/","title":"idea","section":"Blog","content":"doc #   webstorm下调试react js程序(不是在chrome里) https://www.jianshu.com/p/87a5609c5f44   Editor #  General #  Appearance #   Show method separators  Tools #  Terminal #  C:\\Git\\bin\\sh.exe \u0026ndash;login -i\n"}]